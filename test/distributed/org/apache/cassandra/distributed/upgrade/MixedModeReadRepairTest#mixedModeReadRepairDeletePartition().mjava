    /**
     * Test that queries repair partitions that exist in both replicas but have been deleted only in one replica.
     * The partition deletion can be either in the upgraded or in the not-upgraded node.
     */
    @Test
    public void mixedModeReadRepairDeletePartition() throws Throwable
    {
        // partitions for columns (k, c, v, s)
        Object[][] partition1 = new Object[][]{ row(1, 1, 11, 10), row(1, 2, 12, 10) };
        Object[][] partition2 = new Object[][]{ row(2, 1, 21, 20), row(2, 2, 22, 20) };

        allSingleNodeUpgrades()
        .setup(cluster -> {
            cluster.schemaChange(withKeyspace("CREATE TABLE %s.t (k int, c int, v int, s int static, PRIMARY KEY (k, c))"));

            // insert half partition in each node
            String insert = withKeyspace("INSERT INTO %s.t (k, c, v, s) VALUES (?, ?, ?, ?)");
            cluster.coordinator(1).execute(insert, ConsistencyLevel.ALL, partition1[0]);
            cluster.coordinator(1).execute(insert, ConsistencyLevel.ALL, partition1[1]);
            cluster.coordinator(1).execute(insert, ConsistencyLevel.ALL, partition2[0]);
            cluster.coordinator(1).execute(insert, ConsistencyLevel.ALL, partition2[1]);
        })
        .runAfterClusterUpgrade(cluster -> {

            // internally delete one partition per replica
            String delete = withKeyspace("DELETE FROM %s.t WHERE k=?");
            cluster.get(1).executeInternal(delete, 1);
            cluster.get(2).executeInternal(delete, 2);

            // query to trigger read repair
            String query = withKeyspace("SELECT k, c, v, s FROM %s.t");
            assertRows(cluster.get(1).executeInternal(query), partition2);
            assertRows(cluster.get(2).executeInternal(query), partition1);
            assertRows(cluster.coordinator(2).execute(query, ConsistencyLevel.ALL));
            assertRows(cluster.get(1).executeInternal(query));
            assertRows(cluster.get(2).executeInternal(query));
        })
        .run();
    }

