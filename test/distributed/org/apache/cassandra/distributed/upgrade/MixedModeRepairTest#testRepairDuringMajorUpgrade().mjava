    /**
     * Test that repairs fail during a major upgrade. If the repaired node is >= 4.0 thanks to CASSANDRA-13944 there
     * will be an informative message. Otherwise, if the repaired node is below 4.0, there won't be such an informative
     * message and the repair will take very long to timeout.
     */
    @Test
    public void testRepairDuringMajorUpgrade() throws Throwable
    {
        new UpgradeTestBase.TestCase()
        .nodes(2)
        .nodesToUpgrade(UPGRADED_NODE)
        .upgrade(Major.v30, Major.v4)
        .upgrade(Major.v3X, Major.v4)
        .withConfig(config -> config.with(NETWORK, GOSSIP))
        .setup(cluster -> {
            cluster.schemaChange(CREATE_TABLE);
            cluster.setUncaughtExceptionsFilter(throwable -> throwable instanceof RejectedExecutionException);
        })
        .runAfterNodeUpgrade((cluster, node) -> {

            // run the repair scenario in both the upgraded and the not upgraded node
            for (int repairedNode = 1; repairedNode <= cluster.size(); repairedNode++)
            {
                UUID key = UUID.randomUUID();

                // only in node 1, create a sstable with a version of a partition
                Object[] row1 = row(key, 10, 100);
                cluster.get(1).executeInternal(INSERT, row1);
                cluster.get(1).flush(KEYSPACE);

                // only in node 2, create a sstable with another version of the partition
                Object[] row2 = row(key, 20, 200);
                cluster.get(2).executeInternal(INSERT, row2);
                cluster.get(2).flush(KEYSPACE);

                // in case of repairing the upgraded node the repair should be rejected with a decriptive error in both
                // nodetool output and logs (see CASSANDRA-13944)
                if (repairedNode == UPGRADED_NODE)
                {
                    String errorMessage = "Repair is not supported in mixed major version clusters";
                    cluster.get(repairedNode)
                           .nodetoolResult("repair", "--full", KEYSPACE)
                           .asserts()
                           .errorContains(errorMessage);
                    assertLogHas(cluster, repairedNode, errorMessage);
                }
                // if the node issuing the repair is the not updated node we don't have specific error management,
                // so the repair will produce a failure in the upgraded node, and it will take one hour to time out in
                // the not upgraded node. Since we don't want to wait that long, we only wait a few seconds for the
                // repair before verifying the "unknown verb id" error in the upgraded node.
                else
                {
                    try
                    {
                        IUpgradeableInstance instance = cluster.get(repairedNode);
                        CompletableFuture.supplyAsync(() -> instance.nodetoolResult("repair", "--full", KEYSPACE))
                                         .get(10, TimeUnit.SECONDS);
                        fail("Repair in the not upgraded node should have timed out");
                    }
                    catch (TimeoutException e)
                    {
                        assertLogHas(cluster, UPGRADED_NODE, "unexpected exception caught while processing inbound messages");
                        assertLogHas(cluster, UPGRADED_NODE, "java.lang.IllegalArgumentException: Unknown verb id");
                    }
                }

                // verify that the previous failed repair hasn't repaired the data
                assertRows(cluster.get(1).executeInternal(SELECT, key), row1);
                assertRows(cluster.get(2).executeInternal(SELECT, key), row2);
            }
        })
        .run();
    }

