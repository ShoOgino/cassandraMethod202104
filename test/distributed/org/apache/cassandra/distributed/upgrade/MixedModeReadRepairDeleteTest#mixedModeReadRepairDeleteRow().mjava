    /**
     * Test that queries repair rows that exist in both replicas but have been deleted only in one replica.
     * The row deletion can be either in the upgraded or in the not-upgraded node.
     */
    @Test
    public void mixedModeReadRepairDeleteRow() throws Throwable
    {
        // rows for columns (k, c, v, s)
        Object[] row1 = row(0, 1, 10, 8);
        Object[] row2 = row(0, 2, 20, 8);

        allUpgrades(2, 1)
        .setup(cluster -> {
            cluster.schemaChange(withKeyspace("CREATE TABLE %s.t (k int, c int, v int, s int static, PRIMARY KEY (k, c))"));

            // insert the rows in all the nodes
            String insert = withKeyspace("INSERT INTO %s.t (k, c, v, s) VALUES (?, ?, ?, ?)");
            cluster.coordinator(1).execute(insert, ConsistencyLevel.ALL, row1);
            cluster.coordinator(2).execute(insert, ConsistencyLevel.ALL, row2);
        })
        .runAfterClusterUpgrade(cluster -> {

            // internally delete one row per replica
            String delete = withKeyspace("DELETE FROM %s.t WHERE k=? AND c=?");
            cluster.get(1).executeInternal(delete, 0, 1);
            cluster.get(2).executeInternal(delete, 0, 2);

            // query to trigger read repair
            String query = withKeyspace("SELECT k, c, v, s FROM %s.t");
            assertRows(cluster.get(1).executeInternal(query), row2);
            assertRows(cluster.get(2).executeInternal(query), row1);
            Object[] emptyPartition = row(0, null, null, 8);
            assertRows(cluster.coordinator(2).execute(query, ConsistencyLevel.ALL), emptyPartition);
            assertRows(cluster.get(1).executeInternal(query), emptyPartition);
            assertRows(cluster.get(2).executeInternal(query), emptyPartition);
        })
        .run();
    }

