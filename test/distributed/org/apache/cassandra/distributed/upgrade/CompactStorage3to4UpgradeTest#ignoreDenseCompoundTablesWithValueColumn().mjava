    @Test
    public void ignoreDenseCompoundTablesWithValueColumn() throws Throwable
    {
        System.setProperty("cassandra.auto_drop_compact_storage", "true");
        final int partitions = 10;
        final int rowsPerPartition = 10;

        DropCompactTestHelper helper = new DropCompactTestHelper();
        new TestCase()
        .nodes(2)
        .upgrade(Versions.Major.v30, Versions.Major.v4)
        .setup(cluster -> {
            cluster.schemaChange(CREATE_TABLE_C1_R1);

            ICoordinator coordinator = cluster.coordinator(1);
            for (int i = 1; i <= partitions; i++)
                for (int j = 1; j <= rowsPerPartition; j++)
                    coordinator.execute(INSERT_C1_R1, ConsistencyLevel.ALL, i, j, i + j);


            runQueries(coordinator, helper, new String[]{
                String.format("SELECT * FROM %s.%s", KEYSPACE, TABLE_NAME),

                String.format("SELECT * FROM %s.%s WHERE key = %d and c1 = %d",
                              KEYSPACE, TABLE_NAME, partitions - 3, rowsPerPartition - 2),

                String.format("SELECT * FROM %s.%s WHERE key = %d and c1 = %d",
                              KEYSPACE, TABLE_NAME, partitions - 1, rowsPerPartition - 5),

                String.format("SELECT * FROM %s.%s WHERE key = %d and c1 > %d",
                              KEYSPACE, TABLE_NAME, partitions - 8, rowsPerPartition - 3),
            });
        })
        .runAfterNodeUpgrade((cluster, node) -> {
            validateResults(helper, cluster, 1);
            validateResults(helper, cluster, 2);

            String flagQuery = String.format("SELECT flags FROM system_schema.tables WHERE keyspace_name='%s' and table_name='%s'", KEYSPACE, TABLE_NAME);
            Object[][] results = cluster.get(node).executeInternal(flagQuery);
            if (results.length != 1)
                Assert.fail("failed to find table flags with query: " + flagQuery);

            Set<String> flags = (Set) results[0][0];
            Assert.assertTrue("missing compound flag", flags.contains("compound"));
            Assert.assertFalse("found dense flag", flags.contains("dense"));
        })
        .run();
    }

