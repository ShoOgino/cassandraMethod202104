    /**
     * Makes sure that a node that has shutdown doesn't come back as live (without being restarted)
     */
    @Test
    public void shutdownStayDownTest() throws IOException, InterruptedException, ExecutionException
    {
        ExecutorService es = Executors.newSingleThreadExecutor();
        try (Cluster cluster = init(builder().withNodes(2)
                                             .withConfig(config -> config.with(GOSSIP)
                                                                         .with(NETWORK))
                                             .start()))
        {
            cluster.schemaChange("create table "+KEYSPACE+".tbl (id int primary key, v int)");

            for (int i = 0; i < 10; i++)
                cluster.coordinator(1).execute("insert into "+KEYSPACE+".tbl (id, v) values (?,?)", ConsistencyLevel.ALL, i, i);

            SimpleCondition timeToShutdown = new SimpleCondition();
            SimpleCondition waitForShutdown = new SimpleCondition();
            AtomicBoolean signalled = new AtomicBoolean(false);
            Future f = es.submit(() -> {
                await(timeToShutdown);

                cluster.get(1).runOnInstance(() -> {
                    Gossiper.instance.register(new EPChanges());
                });

                cluster.get(2).runOnInstance(() -> {
                    StorageService.instance.setIsShutdownUnsafeForTests(true);
                    Gossiper.instance.stop();
                });
                waitForShutdown.signalAll();
            });

            cluster.filters().outbound().from(2).to(1).verbs(Verb.GOSSIP_DIGEST_SYN.id).messagesMatching((from, to, message) -> true).drop();
            cluster.filters().outbound().from(2).to(1).verbs(Verb.GOSSIP_DIGEST_ACK.id).messagesMatching((from, to, message) ->
                                                                                                         {
                                                                                                             if (signalled.compareAndSet(false, true))
                                                                                                             {
                                                                                                                 timeToShutdown.signalAll();
                                                                                                                 await(waitForShutdown);
                                                                                                                 return false;
                                                                                                             }
                                                                                                             return true;
                                                                                                         }).drop();

            Thread.sleep(10000); // wait for gossip to exchange a few messages
            f.get();
        }
        finally
        {
            es.shutdown();
        }
    }

