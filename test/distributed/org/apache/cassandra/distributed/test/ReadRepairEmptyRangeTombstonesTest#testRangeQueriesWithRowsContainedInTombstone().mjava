    /**
     * Test range queries asking for a not-empty range targeting rows contained in a tombstone range in one replica.
     */
    @Test
    public void testRangeQueriesWithRowsContainedInTombstone()
    {
        tester().createTable("CREATE TABLE %s(k int, c int, PRIMARY KEY (k, c)) " +
                             "WITH CLUSTERING ORDER BY (c %s) AND read_repair='%s'")
                .mutate(1, "DELETE FROM %s USING TIMESTAMP 1 WHERE k=0 AND c>=1 AND c<=5")
                .mutate(1, "INSERT INTO %s (k, c) VALUES (0, 2)")
                .mutate(1, "INSERT INTO %s (k, c) VALUES (0, 3)")
                .mutate(1, "INSERT INTO %s (k, c) VALUES (0, 4)")
                .assertRowsDistributed("SELECT * FROM %s WHERE k=0 AND c>=2 AND c<=3",
                                       paging ? (flush ? 3 : 2) : 1,
                                       row(0, 2), row(0, 3))
                .assertRowsDistributed("SELECT * FROM %s WHERE k=0 AND c>=3 AND c<=4",
                                       paging && flush ? 2 : 1,
                                       row(0, 3), row(0, 4))
                .assertRowsInternal("SELECT * FROM %s", row(0, 2), row(0, 3), row(0, 4))
                .mutate(2, "DELETE FROM %s WHERE k=0 AND c>=1 AND c<=5")
                .assertRowsInternal("SELECT * FROM %s");
    }

