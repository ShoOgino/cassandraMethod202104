    /**
     * This test attempts to create a race condition with speculative executions that would previously cause an AssertionError.
     * N=2, RF=2, read ONE
     * The read will fail on the local node due to tombstone read threshold. At the same time, a spec exec is triggered
     * reading from the other node.
     * <p>
     * See CASSANDRA-16097 for further details.
     */
    @Test
    public void testSpecExecRace() throws Throwable
    {
        try (Cluster cluster = init(Cluster.build().withNodes(2).withConfig(config -> config.set("tombstone_failure_threshold", TOMBSTONE_FAIL_THRESHOLD)).start()))
        {
            // Create a table with the spec exec policy set to a low percentile so it's more likely to produce a spec exec racing with the local request.
            // Not using 'Always' because that actually uses a different class/mechanism and doesn't exercise the bug
            // we're trying to produce.
            cluster.schemaChange(String.format("CREATE TABLE %s.%s (k int, c int, v int, PRIMARY KEY (k,c)) WITH speculative_retry = '5p';", KEYSPACE, TABLE));

            // Create a partition with enough tombstones to create a read failure according to the configured threshold
            for (int i = 0; i <= TOMBSTONE_FAIL_THRESHOLD; ++i)
                cluster.coordinator(1).execute(String.format("DELETE FROM %s.t WHERE k=%d AND c=%d", KEYSPACE, TOMBSTONE_FAIL_KEY, i),
                                               ConsistencyLevel.TWO);

            // Create a bunch of latency samples for this failed operation.
            loopFailStatement(cluster, 5000);
            // Update the spec exec threshold based on the above samples.
            // This would normally be done by the periodic task CassandraDaemon.SPECULATION_THRESHOLD_UPDATER.
            cluster.get(1).runOnInstance(() ->
                                         {
                                             ColumnFamilyStore cfs = Keyspace.open(KEYSPACE)
                                                                             .getColumnFamilyStore(TABLE);
                                             cfs.updateSpeculationThreshold();
                                         });

            // Run the request a bunch of times under racy conditions.
            loopFailStatement(cluster, 5000);
        }
    }

