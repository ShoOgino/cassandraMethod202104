    /**
     * If a node receives a read for a column it's not aware of, it shouldn't complain, since it won't have any data for
     * that column.
     */
    @Test
    public void readWithSchemaDisagreement() throws Throwable
    {
        try (Cluster cluster = init(builder().withNodes(3).withConfig(config -> config.with(NETWORK)).start()))
        {
            cluster.schemaChange(withKeyspace("CREATE TABLE %s.tbl (pk int, ck int, v1 int, PRIMARY KEY (pk, ck))"));

            cluster.get(1).executeInternal(withKeyspace("INSERT INTO %s.tbl (pk, ck, v1) VALUES (1, 1, 1)"));
            cluster.get(2).executeInternal(withKeyspace("INSERT INTO %s.tbl (pk, ck, v1) VALUES (1, 1, 1)"));
            cluster.get(3).executeInternal(withKeyspace("INSERT INTO %s.tbl (pk, ck, v1) VALUES (1, 1, 1)"));

            // Introduce schema disagreement
            cluster.schemaChange(withKeyspace("ALTER TABLE %s.tbl ADD v2 int"), 1);

            assertRows(cluster.coordinator(1).execute(withKeyspace("SELECT * FROM %s.tbl WHERE pk = 1"), ALL),
                       new Object[][]{ new Object[]{ 1, 1, 1, null } });
        }
    }

