    /**
     * Runs the specified query in all coordinators, with and without paging.
     */
    private Object[][] readRows(String query, Object... boundValues)
    {
        query = withTable(query);

        // verify that all coordinators return the same results for the query, regardless of paging
        Object[][] lastRows = null;
        int lastNode = 1;
        boolean lastPaging = false;
        for (int node = 1; node <= NUM_NODES; node++)
        {
            ICoordinator coordinator = cluster.coordinator(node);

            for (boolean paging : BOOLEANS)
            {
                Object[][] rows = paging
                                  ? Iterators.toArray(coordinator.executeWithPaging(query, QUORUM, 1, boundValues),
                                                      Object[].class)
                                  : coordinator.execute(query, QUORUM, boundValues);

                if (lastRows != null)
                {
                    try
                    {
                        assertRows(lastRows, rows);
                    }
                    catch (AssertionError e)
                    {
                        fail(String.format("Node %d %s paging has returned different results " +
                                           "for the same query than node %d %s paging:\n%s",
                                           node, paging ? "with" : "without",
                                           lastNode, lastPaging ? "with" : "without",
                                           e.getMessage()));
                    }
                }

                lastRows = rows;
                lastPaging = paging;
            }

            lastNode = node;
        }
        Assert.assertNotNull(lastRows);

        // undo the clustering reverse sorting to ease validation
        if (reverse)
            ArrayUtils.reverse(lastRows);

        // sort by partition key to ease validation
        Arrays.sort(lastRows, Comparator.comparing(row -> (int) row[0]));

        return lastRows;
    }

