    @Test
    public void testStreamMetrics()
    {
        cluster.schemaChange(String.format("CREATE TABLE %s.cf (k text, c1 text, c2 text, PRIMARY KEY (k)) WITH compaction = {'class': '%s', 'enabled': 'false'}", KEYSPACE, "LeveledCompactionStrategy"));

        final int rowsPerFile = 500;
        final int files = 5;
        for (int k = 0; k < files; k++)
        {
            for (int i = k * rowsPerFile; i < k * rowsPerFile + rowsPerFile; ++i)
                cluster.get(1).executeInternal(withKeyspace("INSERT INTO %s.cf (k, c1, c2) VALUES (?, 'value1', 'value2');"), Integer.toString(i));
            cluster.get(1).nodetool("flush");
        }

        cluster.get(2).executeInternal("TRUNCATE system.available_ranges;");
        Object[][] results = cluster.get(2).executeInternal(String.format("SELECT k, c1, c2 FROM %s.cf;", KEYSPACE));
        assertThat(results.length).isEqualTo(0);

        InetAddressAndPort node1Address = getNodeAddress(1);
        InetAddressAndPort node2Address = getNodeAddress(2);

        // Trigger streaming from node 2
        cluster.get(2).nodetool("rebuild", "--keyspace", KEYSPACE);

        // Assert metrics in node 2
        long transmittedBytes = cluster.get(2).callOnInstance(() -> {
            StreamingMetrics metrics = StreamingMetrics.get(node1Address);
            assertThat(metrics.incomingBytes.getCount())
                .isGreaterThan(0)
                .describedAs("There should be bytes streamed from the peer.");
            assertThat(metrics.outgoingBytes.getCount())
                .isEqualTo(0)
                .describedAs("There should not be sstables streamed to the peer.");
            assertThat(metrics.incomingProcessTime.getCount())
                .isEqualTo(files)
                .describedAs("There should be " + files + " files streamed from the peer.");
            assertThat(metrics.incomingProcessTime.getSnapshot().getMedian())
                .isGreaterThan(0)
                .describedAs("The median processing time should be non-0");
            return metrics.incomingBytes.getCount();
        });

        // Assert metrics in node 1
        cluster.get(1).runOnInstance(() -> {
            StreamingMetrics metrics = StreamingMetrics.get(node2Address);
            assertThat(metrics.incomingBytes.getCount())
                .isEqualTo(0).describedAs("There should not be sstables streamed from the peer.");
            assertThat(metrics.outgoingBytes.getCount())
                .isEqualTo(transmittedBytes)
                .describedAs("The outgoingBytes count in node1 should be equals to incomingBytes count in node2");
            assertThat(metrics.incomingProcessTime.getCount())
                .isEqualTo(0)
                .describedAs("There should be no files streamed from the peer.");
        });
    }

