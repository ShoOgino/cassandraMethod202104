    private static UUID makeFakeSession(Cluster cluster)
    {
        UUID sessionId = UUIDGen.getTimeUUID();
        InetSocketAddress coordinator = cluster.get(1).config().broadcastAddress();
        Set<InetSocketAddress> participants = cluster.stream()
                                                     .map(i -> i.config().broadcastAddress())
                                                     .collect(Collectors.toSet());
        cluster.forEach(i -> {
            i.runOnInstance(() -> {
                ColumnFamilyStore cfs = Keyspace.open(KEYSPACE).getColumnFamilyStore("tbl");
                Range<Token> range = new Range<>(cfs.metadata().partitioner.getMinimumToken(),
                                                 cfs.metadata().partitioner.getRandomToken());
                ActiveRepairService.instance.registerParentRepairSession(sessionId,
                                                                         InetAddressAndPort.getByAddress(coordinator.getAddress()),
                                                                         Lists.newArrayList(cfs),
                                                                         Sets.newHashSet(range),
                                                                         true,
                                                                         System.currentTimeMillis(),
                                                                         true,
                                                                         PreviewKind.NONE);
                LocalSessionAccessor.prepareUnsafe(sessionId,
                                                   InetAddressAndPort.getByAddress(coordinator.getAddress()),
                                                   participants.stream().map(participant -> InetAddressAndPort.getByAddress(participant.getAddress())).collect(Collectors.toSet()));
                LocalSessionAccessor.setState(sessionId, REPAIRING);
            });
        });
        return sessionId;
    }

