    /**
     * Test range queries without restrictions but with a limit on a table with clustering columns.
     */
    @Test
    public void testRangeQueryWithLimitOnWideTable()
    {
        tester("WHERE token(k) >= token(1) LIMIT 2")
        .createTable("CREATE TABLE %s (k int, c int, a int, b int, PRIMARY KEY(k, c))")
        .mutate("INSERT INTO %s (k, c, a, b) VALUES (1, 10, 100, 1000)",
                "INSERT INTO %s (k, c, a, b) VALUES (2, 20, 200, 2000)",
                "INSERT INTO %s (k, c, a, b) VALUES (2, 21, 201, 2001)",
                "INSERT INTO %s (k, c, a, b) VALUES (3, 30, 300, 3000)")
        .queryColumns("a", 2, 2,
                      rows(row(100), row(200)),
                      rows(row(1, 10, 100, 1000), row(2, 20, 200, 2000)),
                      rows(row(1, 10, 100, null), row(2, 20, 200, null)))
        .deleteColumn("DELETE a FROM %s WHERE k=2 AND c=20", "b", 0, 1,
                      rows(row(1000), row(2000)),
                      rows(row(1, 10, 100, 1000), row(2, 20, null, 2000)),
                      rows(row(1, 10, 100, 1000), row(2, 20, 200, 2000)))
        .deleteRows("DELETE FROM %s WHERE k=2 AND c=20", 1,
                    rows(row(1, 10, 100, 1000), row(2, 21, 201, 2001)),
                    rows(row(1, 10, 100, 1000), row(2, 20, null, 2000)))
        .deleteRows("DELETE FROM %s WHERE k=2", 2,
                    rows(row(1, 10, 100, 1000), row(3, 30, 300, 3000)),
                    rows(row(1, 10, 100, 1000), row(2, 21, 201, 2001)))
        .tearDown(0,
                  rows(row(1, 10, 100, 1000), row(3, 30, 300, 3000)),
                  rows(row(1, 10, 100, 1000), row(3, 30, 300, 3000)));
    }

