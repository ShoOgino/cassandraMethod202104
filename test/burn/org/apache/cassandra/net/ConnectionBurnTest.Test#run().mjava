        /**
         * Test connections with broken messages, live in-flight bytes updates, reconnect
         */
        public void run() throws ExecutionException, InterruptedException, NoSuchFieldException, IllegalAccessException, TimeoutException
        {
            Reporters reporters = new Reporters(endpoints, connections);
            try
            {
                long deadline = System.nanoTime() + runForNanos;
                Verb._TEST_2.unsafeSetHandler(() -> message -> {});
                Verb._TEST_2.unsafeSetSerializer(() -> serializer);
                inbound.sockets.open().get();

                CountDownLatch failed = new CountDownLatch(1);
                for (Connection connection : connections)
                    connection.startVerifier(failed::countDown, executor, deadline);

                for (int i = 0 ; i < 2 * connections.length ; ++i)
                {
                    executor.execute(() -> {
                        String threadName = Thread.currentThread().getName();
                        try
                        {
                            ThreadLocalRandom random = ThreadLocalRandom.current();
                            while (approxTime.now() < deadline && !Thread.currentThread().isInterrupted())
                            {
                                Connection connection = connections[random.nextInt(connections.length)];
                                if (!connection.registerSender())
                                    continue;

                                try
                                {
                                    Thread.currentThread().setName("Generate-" + connection.linkId);
                                    int count = 0;
                                    switch (random.nextInt() & 3)
                                    {
                                        case 0: count = random.nextInt(100, 200); break;
                                        case 1: count = random.nextInt(200, 1000); break;
                                        case 2: count = random.nextInt(1000, 2000); break;
                                        case 3: count = random.nextInt(2000, 10000); break;
                                    }

                                    if (connection.outbound.type() == LARGE_MESSAGES)
                                        count /= 2;

                                    while (connection.isSending()
                                           && count-- > 0
                                           && approxTime.now() < deadline
                                           && !Thread.currentThread().isInterrupted())
                                        connection.sendOne();
                                }
                                finally
                                {
                                    Thread.currentThread().setName(threadName);
                                    connection.unregisterSender();
                                }
                            }
                        }
                        catch (Throwable t)
                        {
                            if (t instanceof InterruptedException)
                                return;
                            logger.error("Unexpected exception", t);
                            failed.countDown();
                        }
                    });
                }

                executor.execute(() -> {
                    Thread.currentThread().setName("Test-SetInFlight");
                    ThreadLocalRandom random = ThreadLocalRandom.current();
                    List<Connection> connections = new ArrayList<>(Arrays.asList(this.connections));
                    while (!Thread.currentThread().isInterrupted())
                    {
                        Collections.shuffle(connections);
                        int total = random.nextInt(1 << 20, 128 << 20);
                        for (int i = connections.size() - 1; i >= 1 ; --i)
                        {
                            int average = total / (i + 1);
                            int max = random.nextInt(1, min(2 * average, total - 2));
                            int min = random.nextInt(0, max);
                            connections.get(i).setInFlightByteBounds(min, max);
                            total -= max;
                        }
                        // note that setInFlightByteBounds might not
                        connections.get(0).setInFlightByteBounds(random.nextInt(0, total), total);
                        Uninterruptibles.sleepUninterruptibly(1L, TimeUnit.SECONDS);
                    }
                });

                // TODO: slowly modify the pattern of interrupts, from often to infrequent
                executor.execute(() -> {
                    Thread.currentThread().setName("Test-Reconnect");
                    ThreadLocalRandom random = ThreadLocalRandom.current();
                    while (deadline > System.nanoTime())
                    {
                        try
                        {
                            Thread.sleep(random.nextInt(60000));
                        }
                        catch (InterruptedException e)
                        {
                            break;
                        }
                        Connection connection = connections[random.nextInt(connections.length)];
                        OutboundConnectionSettings template = connection.outboundTemplate;
                        template = ConnectionTest.SETTINGS.get(random.nextInt(ConnectionTest.SETTINGS.size()))
                                   .outbound.apply(template);
                        connection.reconnectWith(template);
                    }
                });

                executor.execute(() -> {
                    Thread.currentThread().setName("Test-Sync");
                    ThreadLocalRandom random = ThreadLocalRandom.current();
                    BiConsumer<InetAddressAndPort, List<Connection>> checkStoppedTo = (to, from) -> {
                        InboundMessageHandlers handlers = from.get(0).inbound;
                        long using = handlers.usingCapacity();
                        long usingReserve = handlers.usingEndpointReserveCapacity();
                        if (using != 0 || usingReserve != 0)
                        {
                            String message = to + " inbound using %d capacity and %d reserve; should be zero";
                            from.get(0).verifier.logFailure(message, using, usingReserve);
                        }
                    };
                    BiConsumer<InetAddressAndPort, List<Connection>> checkStoppedFrom = (from, to) -> {
                        long using = to.stream().map(c -> c.outbound).mapToLong(OutboundConnection::pendingBytes).sum();
                        long usingReserve = to.get(0).outbound.unsafeGetEndpointReserveLimits().using();
                        if (using != 0 || usingReserve != 0)
                        {
                            String message = from + " outbound using %d capacity and %d reserve; should be zero";
                            to.get(0).verifier.logFailure(message, using, usingReserve);
                        }
                    };
                    ThrowingBiConsumer<List<Connection>, ThrowingRunnable<InterruptedException>, InterruptedException> sync =
                    (connections, exec) -> {
                        logger.info("Syncing connections: {}", connections);
                        final CountDownLatch ready = new CountDownLatch(connections.size());
                        final CountDownLatch done = new CountDownLatch(1);
                        for (Connection connection : connections)
                        {
                            connection.sync(() -> {
                                ready.countDown();
                                try { done.await(); }
                                catch (InterruptedException e) { Thread.interrupted(); }
                            });
                        }
                        ready.await();
                        try
                        {
                            exec.run();
                        }
                        finally
                        {
                            done.countDown();
                        }
                        logger.info("Sync'd connections: {}", connections);
                    };

                    int count = 0;
                    while (deadline > System.nanoTime())
                    {

                        try
                        {
                            Thread.sleep(random.nextInt(10000));

                            if (++count % 10 == 0)
//                            {
//                                boolean checkInbound = random.nextBoolean();
//                                BiConsumer<InetAddressAndPort, List<Connection>> verifier = checkInbound ? checkStoppedTo : checkStoppedFrom;
//                                InetAddressAndPort endpoint = endpoints.get(random.nextInt(endpoints.size()));
//                                List<Connection> connections = getConnections(endpoint, checkInbound);
//                                sync.accept(connections, () -> verifier.accept(endpoint, connections));
//                            }
//                            else if (count % 100 == 0)
                            {
                                sync.accept(ImmutableList.copyOf(connections), () -> {

                                    for (InetAddressAndPort endpoint : endpoints)
                                    {
                                        checkStoppedTo  .accept(endpoint, getConnections(endpoint, true ));
                                        checkStoppedFrom.accept(endpoint, getConnections(endpoint, false));
                                    }
                                    long inUse = BufferPools.forNetworking().usedSizeInBytes();
                                    if (inUse > 0)
                                    {
//                                        try
//                                        {
//                                            ManagementFactory.getPlatformMXBean(HotSpotDiagnosticMXBean.class).dumpHeap("/Users/belliottsmith/code/cassandra/cassandra/leak.hprof", true);
//                                        }
//                                        catch (IOException e)
//                                        {
//                                            throw new RuntimeException(e);
//                                        }
                                        connections[0].verifier.logFailure("Using %d bytes of BufferPool, but all connections are idle", inUse);
                                    }
                                });
                            }
                            else
                            {
                                CountDownLatch latch = new CountDownLatch(1);
                                Connection connection = connections[random.nextInt(connections.length)];
                                connection.sync(latch::countDown);
                                latch.await();
                            }
                        }
                        catch (InterruptedException e)
                        {
                            break;
                        }
                    }
                });

                while (deadline > System.nanoTime() && failed.getCount() > 0)
                {
                    reporters.update();
                    reporters.print();
                    Uninterruptibles.awaitUninterruptibly(failed, 30L, TimeUnit.SECONDS);
                }

                executor.shutdownNow();
                ExecutorUtils.awaitTermination(1L, TimeUnit.MINUTES, executor);
            }
            finally
            {
                reporters.update();
                reporters.print();

                inbound.sockets.close().get();
                new FutureCombiner(Arrays.stream(connections)
                                         .map(c -> c.outbound.close(false))
                                         .collect(Collectors.toList()))
                .get();
            }
        }

