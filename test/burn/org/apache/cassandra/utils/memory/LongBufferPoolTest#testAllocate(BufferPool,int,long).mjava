    public void testAllocate(BufferPool bufferPool, int threadCount, long duration) throws InterruptedException, ExecutionException
    {
        logger.info("{} - testing {} threads for {}m", DATE_FORMAT.format(new Date()), threadCount, TimeUnit.NANOSECONDS.toMinutes(duration));
        logger.info("Testing BufferPool with memoryUsageThreshold={} and enabling BufferPool.DEBUG", bufferPool.memoryUsageThreshold());
        Debug debug = new Debug();
        bufferPool.debug(debug);

        TestEnvironment testEnv = new TestEnvironment(threadCount, duration, bufferPool.memoryUsageThreshold());

        startBurnerThreads(bufferPool, testEnv);

        for (int threadIdx = 0; threadIdx < threadCount; threadIdx++)
            testEnv.addCheckedFuture(startWorkerThread(bufferPool, testEnv, threadIdx));

        while (!testEnv.latch.await(10L, TimeUnit.SECONDS))
        {
            int stalledThreads = testEnv.countStalledThreads();
            int doneThreads = testEnv.countDoneThreads();

            if (doneThreads == 0) // If any threads have completed, they will stop making progress/recycling buffers.
            {                     // Assertions failures on the threads will be caught below.
                assert stalledThreads == 0;
                boolean allFreed = testEnv.burnFreed.getAndSet(false);
                for (AtomicBoolean freedMemory : testEnv.freedAllMemory)
                    allFreed = allFreed && freedMemory.getAndSet(false);
                if (allFreed)
                    debug.check();
                else
                    logger.info("All threads did not free all memory in this time slot - skipping buffer recycle check");
            }
        }

        for (SPSCQueue<BufferCheck> queue : testEnv.sharedRecycle)
        {
            BufferCheck check;
            while ( null != (check = queue.poll()) )
            {
                check.validate();
                bufferPool.put(check.buffer);
            }
        }

        assertEquals(0, testEnv.executorService.shutdownNow().size());

        logger.info("Reverting BufferPool DEBUG config");
        bufferPool.debug(BufferPool.Debug.NO_OP);

        testEnv.assertCheckedThreadsSucceeded();

        logger.info("{} - finished.", DATE_FORMAT.format(new Date()));
    }

