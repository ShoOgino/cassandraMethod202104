    public void perfTest(SizeCaps requestCaps, SizeCaps responseCaps, Cluster.Builder builder) throws Throwable
    {
        SimpleStatement request = generateQueryStatement(0, requestCaps);
        ResultMessage.Rows response = generateRows(0, responseCaps);
        QueryMessage requestMessage = generateQueryMessage(0, requestCaps);
        Envelope message = requestMessage.encode(ProtocolVersion.V4);
        int requestSize = message.body.readableBytes();
        message.release();
        message = response.encode(ProtocolVersion.V4);
        int responseSize = message.body.readableBytes();
        message.release();
        Message.Type.QUERY.unsafeSetCodec(new Message.Codec<QueryMessage>() {
            public QueryMessage decode(ByteBuf body, ProtocolVersion version)
            {
                QueryMessage queryMessage = QueryMessage.codec.decode(body, version);
                return new QueryMessage(queryMessage.query, queryMessage.options) {
                    protected Message.Response execute(QueryState state, long queryStartNanoTime, boolean traceRequest)
                    {
                        try
                        {
                            int idx = Integer.parseInt(queryMessage.query); // unused
                            return generateRows(idx, responseCaps);
                        }
                        catch (NumberFormatException e)
                        {
                            // for the requests driver issues under the hood
                            return super.execute(state, queryStartNanoTime, traceRequest);
                        }
                    }
                };
            }

            public void encode(QueryMessage queryMessage, ByteBuf dest, ProtocolVersion version)
            {
                QueryMessage.codec.encode(queryMessage, dest, version);
            }

            public int encodedSize(QueryMessage queryMessage, ProtocolVersion version)
            {
                return QueryMessage.codec.encodedSize(queryMessage, version);
            }
        });

        int threads = 10;
        int perThread = 30;
        ExecutorService executor = Executors.newFixedThreadPool(threads + 10);
        AtomicReference<Throwable> error = new AtomicReference<>();
        CountDownLatch signal = new CountDownLatch(1);

        AtomicBoolean measure = new AtomicBoolean(false);
        DescriptiveStatistics stats = new DescriptiveStatistics();
        Lock lock = new ReentrantLock();
        for (int t = 0; t < threads; t++)
        {
            executor.execute(() -> {
                try (Cluster driver = builder.build();
                     Session session = driver.connect())
                {
                    while (!executor.isShutdown() && error.get() == null)
                    {
                        Map<Integer, ResultSetFuture> futures = new HashMap<>();

                        for (int j = 0; j < perThread; j++)
                        {
                            long startNanos = System.nanoTime();
                            ResultSetFuture future = session.executeAsync(request);
                            future.addListener(() -> {
                                long diff = System.nanoTime() - startNanos;
                                if (measure.get())
                                {
                                    lock.lock();
                                    try
                                    {
                                        stats.addValue(TimeUnit.MICROSECONDS.toMillis(diff));
                                    }
                                    finally
                                    {
                                        lock.unlock();
                                    }
                                }
                            }, executor);
                            futures.put(j, future);
                        }

                        for (Map.Entry<Integer, ResultSetFuture> e : futures.entrySet())
                        {
                            Assert.assertEquals(response.result.size(),
                                                e.getValue().get().all().size());
                        }
                    }
                }
                catch (Throwable e)
                {
                    e.printStackTrace();
                    error.set(e);
                    signal.countDown();
                }
            });
        }

        Assert.assertFalse(signal.await(30, TimeUnit.SECONDS));
        measure.set(true);
        Assert.assertFalse(signal.await(60, TimeUnit.SECONDS));
        executor.shutdown();
        executor.awaitTermination(10, TimeUnit.SECONDS);

        System.out.println("requestSize = " + requestSize);
        System.out.println("responseSize = " + responseSize);
        System.out.println("Mean:     " + stats.getMean());
        System.out.println("Variance: " + stats.getVariance());
        System.out.println("Median:   " + stats.getPercentile(0.5));
        System.out.println("90p:      " + stats.getPercentile(0.90));
        System.out.println("95p:      " + stats.getPercentile(0.95));
        System.out.println("99p:      " + stats.getPercentile(0.99));
    }

