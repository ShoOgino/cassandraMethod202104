    @Test
    public void testActiveCompactionTrackingRaceWithIndexBuilder() throws Throwable
    {
        createTable("CREATE TABLE %s (pk int, ck int, a int, b int, PRIMARY KEY (pk, ck))");
        String idxName = createIndex("CREATE INDEX on %s(a)");
        getCurrentColumnFamilyStore().disableAutoCompaction();
        for (int i = 0; i < 5; i++)
        {
            execute("INSERT INTO %s (pk, ck, a, b) VALUES (" + i + ", 2, 3, 4)");
            getCurrentColumnFamilyStore().forceBlockingFlush();
        }

        Index idx = getCurrentColumnFamilyStore().indexManager.getIndexByName(idxName);
        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();

        ExecutorService es = Executors.newFixedThreadPool(2);

        final int loopCount = 5000;
        for (int ii = 0; ii < loopCount; ii++)
        {
            CountDownLatch trigger = new CountDownLatch(1);
            SecondaryIndexBuilder builder = idx.getBuildTaskSupport().getIndexBuildTask(getCurrentColumnFamilyStore(), Collections.singleton(idx), sstables);
            Future<?> f1 = es.submit(() -> {
                Uninterruptibles.awaitUninterruptibly(trigger);
                try
                {
                    CompactionManager.instance.submitIndexBuild(builder).get();
                }
                catch (Exception e)
                {
                    throw new RuntimeException(e);
                }
            });
            Future<?> f2 = es.submit(() -> {
                Uninterruptibles.awaitUninterruptibly(trigger);
                CompactionManager.instance.active.getCompactionsForSSTable(null, null);
            });
            trigger.countDown();
            FBUtilities.waitOnFutures(Arrays.asList(f1, f2));
        }
        es.shutdown();
        es.awaitTermination(1, TimeUnit.MINUTES);
    }

