    /**
     * Tests whether a filter fetches and/or queries columns and cells.
     */
    @Test
    public void testFetchedQueried()
    {
        CFMetaData metadata = CFMetaData.Builder.create("ks", "table")
                                              .withPartitioner(Murmur3Partitioner.instance)
                                              .addPartitionKey("k", Int32Type.instance)
                                              .addRegularColumn("simple", Int32Type.instance)
                                              .addRegularColumn("complex", SetType.getInstance(Int32Type.instance, true))
                                              .build();

        ColumnDefinition simple = metadata.getColumnDefinition(ByteBufferUtil.bytes("simple"));
        ColumnDefinition complex = metadata.getColumnDefinition(ByteBufferUtil.bytes("complex"));
        CellPath path1 = CellPath.create(ByteBufferUtil.bytes(1));
        CellPath path2 = CellPath.create(ByteBufferUtil.bytes(2));
        ColumnFilter filter;

        // select only the simple column, without table metadata
        filter = ColumnFilter.selection(PartitionColumns.builder().add(simple).build());
        assertFetchedQueried(true, true, filter, simple);
        assertFetchedQueried(false, false, filter, complex);
        assertFetchedQueried(false, false, filter, complex, path1);
        assertFetchedQueried(false, false, filter, complex, path2);

        // select only the complex column, without table metadata
        filter = ColumnFilter.selection(PartitionColumns.builder().add(complex).build());
        assertFetchedQueried(false, false, filter, simple);
        assertFetchedQueried(true, true, filter, complex);
        assertFetchedQueried(true, true, filter, complex, path1);
        assertFetchedQueried(true, true, filter, complex, path2);

        // select both the simple and complex columns, without table metadata
        filter = ColumnFilter.selection(PartitionColumns.builder().add(simple).add(complex).build());
        assertFetchedQueried(true, true, filter, simple);
        assertFetchedQueried(true, true, filter, complex);
        assertFetchedQueried(true, true, filter, complex, path1);
        assertFetchedQueried(true, true, filter, complex, path2);

        // select only the simple column, with table metadata
        filter = ColumnFilter.selection(metadata, PartitionColumns.builder().add(simple).build());
        assertFetchedQueried(true, true, filter, simple);
        assertFetchedQueried(true, false, filter, complex);
        assertFetchedQueried(true, false, filter, complex, path1);
        assertFetchedQueried(true, false, filter, complex, path2);

        // select only the complex column, with table metadata
        filter = ColumnFilter.selection(metadata, PartitionColumns.builder().add(complex).build());
        assertFetchedQueried(true, false, filter, simple);
        assertFetchedQueried(true, true, filter, complex);
        assertFetchedQueried(true, true, filter, complex, path1);
        assertFetchedQueried(true, true, filter, complex, path2);

        // select both the simple and complex columns, with table metadata
        filter = ColumnFilter.selection(metadata, PartitionColumns.builder().add(simple).add(complex).build());
        assertFetchedQueried(true, true, filter, simple);
        assertFetchedQueried(true, true, filter, complex);
        assertFetchedQueried(true, true, filter, complex, path1);
        assertFetchedQueried(true, true, filter, complex, path2);

        // select only the simple column, with selection builder
        filter = ColumnFilter.selectionBuilder().add(simple).build();
        assertFetchedQueried(true, true, filter, simple);
        assertFetchedQueried(false, false, filter, complex);
        assertFetchedQueried(false, false, filter, complex, path1);
        assertFetchedQueried(false, false, filter, complex, path2);

        // select only a cell of the complex column, with selection builder
        filter = ColumnFilter.selectionBuilder().select(complex, path1).build();
        assertFetchedQueried(false, false, filter, simple);
        assertFetchedQueried(true, true, filter, complex);
        assertFetchedQueried(true, true, filter, complex, path1);
        assertFetchedQueried(true, false, filter, complex, path2);

        // select both the simple column and a cell of the complex column, with selection builder
        filter = ColumnFilter.selectionBuilder().add(simple).select(complex, path1).build();
        assertFetchedQueried(true, true, filter, simple);
        assertFetchedQueried(true, true, filter, complex);
        assertFetchedQueried(true, true, filter, complex, path1);
        assertFetchedQueried(true, false, filter, complex, path2);
    }

