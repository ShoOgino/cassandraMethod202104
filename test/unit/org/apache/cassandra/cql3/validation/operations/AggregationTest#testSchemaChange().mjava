    @Test
    public void testSchemaChange() throws Throwable
    {
        String f = createFunction(KEYSPACE,
                                  "double, double",
                                  "CREATE OR REPLACE FUNCTION %s(state double, val double) " +
                                  "RETURNS NULL ON NULL INPUT " +
                                  "RETURNS double " +
                                  "LANGUAGE javascript " +
                                  "AS '\"string\";';");

        createFunctionOverload(f,
                               "double, double",
                               "CREATE OR REPLACE FUNCTION %s(state int, val int) " +
                               "RETURNS NULL ON NULL INPUT " +
                               "RETURNS int " +
                               "LANGUAGE javascript " +
                               "AS '\"string\";';");

        String a = createAggregateName(KEYSPACE);
        String aggregateName = shortFunctionName(a);
        registerAggregate(a, "double");

        assertSchemaChange("CREATE OR REPLACE AGGREGATE " + a + "(double) " +
                           "SFUNC " + shortFunctionName(f) + " " +
                           "STYPE double " +
                           "INITCOND 0",
                           Change.CREATED, Target.AGGREGATE,
                           KEYSPACE, aggregateName,
                           "double");

        assertSchemaChange("CREATE OR REPLACE AGGREGATE " + a + "(double) " +
                           "SFUNC " + shortFunctionName(f) + " " +
                           "STYPE double " +
                           "INITCOND 1",
                           Change.UPDATED, Target.AGGREGATE,
                           KEYSPACE, aggregateName,
                           "double");

        registerAggregate(a, "int");

        assertSchemaChange("CREATE OR REPLACE AGGREGATE " + a + "(int) " +
                           "SFUNC " + shortFunctionName(f) + " " +
                           "STYPE int " +
                           "INITCOND 0",
                           Change.CREATED, Target.AGGREGATE,
                           KEYSPACE, aggregateName,
                           "int");

        assertSchemaChange("DROP AGGREGATE " + a + "(double)",
                           Change.DROPPED, Target.AGGREGATE,
                           KEYSPACE, aggregateName,
                           "double");
    }

