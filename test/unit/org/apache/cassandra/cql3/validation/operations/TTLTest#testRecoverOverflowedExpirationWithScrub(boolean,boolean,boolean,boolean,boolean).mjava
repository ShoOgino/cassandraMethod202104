    public void testRecoverOverflowedExpirationWithScrub(boolean simple, boolean clustering, boolean runScrub, boolean runSStableScrub,  boolean reinsertOverflowedTTL) throws Throwable
    {
        if (reinsertOverflowedTTL)
        {
            assert runScrub || runSStableScrub;
        }

        createTable(simple, clustering);

        Keyspace keyspace = Keyspace.open(KEYSPACE);
        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(currentTable());

        assertEquals(0, cfs.getLiveSSTables().size());

        copySSTablesToTableDir(currentTable(), simple, clustering);

        cfs.loadNewSSTables();

        if (runScrub)
        {
            cfs.scrub(true, false, true, reinsertOverflowedTTL, 1);

            if (reinsertOverflowedTTL)
            {
                if (simple)
                    assertRows(execute("SELECT * from %s"), row(1, 1, 1), row(2, 2, null));
                else
                    assertRows(execute("SELECT * from %s"), row(1, 1, set("v11", "v12", "v13", "v14")), row(2, 2, set("v21", "v22", "v23", "v24")));

                cfs.forceMajorCompaction();

                if (simple)
                    assertRows(execute("SELECT * from %s"), row(1, 1, 1), row(2, 2, null));
                else
                    assertRows(execute("SELECT * from %s"), row(1, 1, set("v11", "v12", "v13", "v14")), row(2, 2, set("v21", "v22", "v23", "v24")));
            }
            else
            {
                assertEmpty(execute("SELECT * from %s"));
            }
        }
        if (runSStableScrub)
        {
            System.setProperty(org.apache.cassandra.tools.Util.ALLOW_TOOL_REINIT_FOR_TEST, "true"); // Necessary for testing

            try
            {
                ToolResult tool;
                if (reinsertOverflowedTTL)
                    tool = ToolRunner.invokeClass(StandaloneScrubber.class, "-r", KEYSPACE, cfs.name);
                else
                    tool = ToolRunner.invokeClass(StandaloneScrubber.class, KEYSPACE, cfs.name);

                tool.assertOnCleanExit();
                Assertions.assertThat(tool.getStdout()).contains("Pre-scrub sstables snapshotted into");
                if (reinsertOverflowedTTL)
                    Assertions.assertThat(tool.getStdout()).contains("Fixed 2 rows with overflowed local deletion time.");
                else
                    Assertions.assertThat(tool.getStdout()).contains("Unable to recover 2 rows that were skipped.");
            }
            finally
            {
                System.clearProperty(org.apache.cassandra.tools.Util.ALLOW_TOOL_REINIT_FOR_TEST);
            }
        }

        try
        {
            dropTable("DROP TABLE %s");
        }
        catch (Throwable e)
        {
            // StandaloneScrubber.class should be ran as a tool with a stable env. In a test env there are things moving
            // under its feet such as the async CQLTester.afterTest() operations. We try to sync cleanup of tables here
            // but we need to catch any exceptions we might run into bc of the hack. See CASSANDRA-16546
        }
    }

