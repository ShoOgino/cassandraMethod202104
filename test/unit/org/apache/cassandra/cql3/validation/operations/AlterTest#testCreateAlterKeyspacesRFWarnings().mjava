    @Test
    public void testCreateAlterKeyspacesRFWarnings() throws Throwable
    {
        requireNetwork();

        // NTS
        ClientWarn.instance.captureWarnings();
        String ks = createKeyspace("CREATE KEYSPACE %s WITH replication = {'class' : 'NetworkTopologyStrategy', '" + DATA_CENTER + "' : 3 }");
        List<String> warnings = ClientWarn.instance.getWarnings();
        assertEquals(1, warnings.size());
        Assertions.assertThat(warnings.get(0)).contains("Your replication factor 3 for keyspace " + ks + " is higher than the number of nodes 1 for datacenter " + DATA_CENTER);

        ClientWarn.instance.captureWarnings();
        execute("CREATE TABLE " + ks + ".t (k int PRIMARY KEY, v int)");
        warnings = ClientWarn.instance.getWarnings();
        assertNull(warnings);

        ClientWarn.instance.captureWarnings();
        execute("ALTER KEYSPACE " + ks + " WITH replication = {'class' : 'NetworkTopologyStrategy', '" + DATA_CENTER + "' : 2 }");
        warnings = ClientWarn.instance.getWarnings();
        assertEquals(1, warnings.size());
        Assertions.assertThat(warnings.get(0)).contains("Your replication factor 2 for keyspace " + ks + " is higher than the number of nodes 1 for datacenter " + DATA_CENTER);

        ClientWarn.instance.captureWarnings();
        execute("ALTER KEYSPACE " + ks + " WITH replication = {'class' : 'NetworkTopologyStrategy', '" + DATA_CENTER + "' : 1 }");
        warnings = ClientWarn.instance.getWarnings();
        assertNull(warnings);

        // SimpleStrategy
        ClientWarn.instance.captureWarnings();
        ks = createKeyspace("CREATE KEYSPACE %s WITH replication = { 'class' : 'SimpleStrategy', 'replication_factor' : 3 }");
        warnings = ClientWarn.instance.getWarnings();
        assertEquals(1, warnings.size());
        Assertions.assertThat(warnings.get(0)).contains("Your replication factor 3 for keyspace " + ks + " is higher than the number of nodes 1");

        ClientWarn.instance.captureWarnings();
        execute("CREATE TABLE " + ks + ".t (k int PRIMARY KEY, v int)");
        warnings = ClientWarn.instance.getWarnings();
        assertNull(warnings);

        ClientWarn.instance.captureWarnings();
        execute("ALTER KEYSPACE " + ks + " WITH replication = { 'class' : 'SimpleStrategy', 'replication_factor' : 2 }");
        warnings = ClientWarn.instance.getWarnings();
        assertEquals(1, warnings.size());
        Assertions.assertThat(warnings.get(0)).contains("Your replication factor 2 for keyspace " + ks + " is higher than the number of nodes 1");

        ClientWarn.instance.captureWarnings();
        execute("ALTER KEYSPACE " + ks + " WITH replication = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 }");
        warnings = ClientWarn.instance.getWarnings();
        assertNull(warnings);
    }

