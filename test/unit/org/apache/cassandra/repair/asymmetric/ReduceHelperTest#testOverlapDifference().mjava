    @Test
    public void testOverlapDifference()
    {
        /*
            |A     |B     |C
         ---+------+------+--------
         A  |=     |50,100|0,50
         B  |      |=     |0,100
         C  |      |      |=

         A needs to stream (50, 100] from B, (0, 50] from C
         B needs to stream (50, 100] from A, (0, 100] from C
         C needs to stream (0, 50] from A, (0, 100] from B
         A == B on (0, 50]   => C can stream (0, 50] from either A or B
         A == C on (50, 100] => B can stream (50, 100] from either A or C
         =>
         A streams (50, 100] from {B}, (0, 50] from C
         B streams (0, 50] from {C}, (50, 100] from {A, C}
         C streams (0, 50] from {A, B}, (50, 100] from B
         */
        Map<InetAddressAndPort, HostDifferences> differences = new HashMap<>();
        addDifference(A, differences, B, list(range(50, 100)));
        addDifference(A, differences, C, list(range(0, 50)));
        addDifference(B, differences, C, list(range(0, 100)));
        DifferenceHolder differenceHolder = new DifferenceHolder(differences);
        Map<InetAddressAndPort, IncomingRepairStreamTracker> tracker = ReduceHelper.createIncomingRepairStreamTrackers(differenceHolder);
        assertEquals(set(set(C)), tracker.get(A).getIncoming().get(range(0, 50)).allStreams());
        assertEquals(set(set(B)), tracker.get(A).getIncoming().get(range(50, 100)).allStreams());
        assertEquals(set(set(C)), tracker.get(B).getIncoming().get(range(0, 50)).allStreams());
        assertEquals(set(set(A,C)), tracker.get(B).getIncoming().get(range(50, 100)).allStreams());
        assertEquals(set(set(A,B)), tracker.get(C).getIncoming().get(range(0, 50)).allStreams());
        assertEquals(set(set(B)), tracker.get(C).getIncoming().get(range(50, 100)).allStreams());

        ImmutableMap<InetAddressAndPort, HostDifferences> reduced = ReduceHelper.reduce(differenceHolder, (x, y) -> y);

        HostDifferences n0 = reduced.get(A);

        assertTrue(n0.get(B).equals(set(range(50, 100))));
        assertTrue(n0.get(C).equals(set(range(0, 50))));

        HostDifferences n1 = reduced.get(B);
        assertEquals(0, n1.get(B).size());
        if (!n1.get(A).isEmpty())
        {
            assertTrue(n1.get(C).equals(set(range(0, 50))));
            assertTrue(n1.get(A).equals(set(range(50, 100))));
        }
        else
        {
            assertTrue(n1.get(C).equals(set(range(0, 50), range(50, 100))));
        }
        HostDifferences n2 = reduced.get(C);
        assertEquals(0, n2.get(C).size());
        if (!n2.get(A).isEmpty())
        {
            assertTrue(n2.get(A).equals(set(range(0,50))));
            assertTrue(n2.get(B).equals(set(range(50, 100))));
        }
        else
        {
            assertTrue(n2.get(A).equals(set(range(0, 50), range(50, 100))));
        }


    }

