    @Test
    public void randomTest()
    {
        int iterCount = 0;
        while (iterCount < 10000)
        {
            RangeMap<Integer> rangeMap = new RangeMap<>();
            int cnt = 2000;
            int i = 0;
            long seed = System.currentTimeMillis();
            Random r = new Random(seed);
            Set<Range<Token>> randomRanges = random(cnt, r);
            for (Range<Token> range : randomRanges)
                rangeMap.put(range, i++);

            long a = r.nextLong() % 100000;
            long b = r.nextLong() % 100000;
            if (a == b) b++;

            Range<Token> intersectionRange = r(a, b);

            Set<Map.Entry<Range<Token>, Integer>> expected = new HashSet<>();
            for (Map.Entry<Range<Token>, Integer> entry : rangeMap.entrySet())
                if (intersectionRange.intersects(entry.getKey()))
                    expected.add(new RangeMap.Entry<>(entry));

            Set<Map.Entry<Range<Token>, Integer>> intersection = new HashSet<>(rangeMap.removeIntersecting(intersectionRange));

            // no intersecting ranges left in the range map:
            for (Map.Entry<Range<Token>, Integer> entry : rangeMap.entrySet())
                assertFalse("seed:"+seed, intersectionRange.intersects(entry.getKey()));

            assertEquals("seed:"+seed, expected, intersection);
            if (++iterCount % 1000 == 0)
                 System.out.println(iterCount);
        }
    }

