    @Test
    public void testSerializer() throws IOException
    {
        UUID hostId = UUID.randomUUID();
        long now = FBUtilities.timestampMicros();
        TableMetadata table = Schema.instance.getTableMetadata(KEYSPACE, TABLE);
        
        Mutation mutation = 
            new RowUpdateBuilder(table, now, bytes("key")).clustering("column").add("val", "val" + 1234).build();
        
        Hint hint = Hint.create(mutation, now / 1000);
        HintMessage message = new HintMessage(hostId, hint);

        // serialize
        int serializedSize = (int) HintMessage.serializer.serializedSize(message, MessagingService.current_version);
        HintMessage deserializedMessage;
        
        try (DataOutputBuffer dob = new DataOutputBuffer())
        {
            HintMessage.serializer.serialize(message, dob, MessagingService.current_version);
            assertEquals(serializedSize, dob.getLength());

            // deserialize
            DataInputPlus di = new DataInputBuffer(dob.buffer(), true);
            deserializedMessage = HintMessage.serializer.deserialize(di, MessagingService.current_version);
        }

        // compare before/after
        assertEquals(hostId, deserializedMessage.hostId);
        assertNotNull(deserializedMessage.hint);
        assertHintsEqual(hint, deserializedMessage.hint);
    }

