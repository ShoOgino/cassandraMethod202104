    @Test
    public void testEncodedSerializer() throws IOException
    {
        UUID hostId = UUID.randomUUID();
        long now = FBUtilities.timestampMicros();
        TableMetadata table = Schema.instance.getTableMetadata(KEYSPACE, TABLE);
        
        Mutation mutation =
            new RowUpdateBuilder(table, now, bytes("key")).clustering("column").add("val", "val" + 1234) .build();
        
        Hint hint = Hint.create(mutation, now / 1000);
        HintMessage.Encoded message;
        
        try (DataOutputBuffer dob = new DataOutputBuffer())
        {
            Hint.serializer.serialize(hint, dob, MessagingService.current_version);
            message = new HintMessage.Encoded(hostId, dob.buffer(), MessagingService.current_version);
        } 

        // serialize
        int serializedSize = (int) HintMessage.serializer.serializedSize(message, MessagingService.current_version);
        DataOutputBuffer dob = new DataOutputBuffer();
        HintMessage.serializer.serialize(message, dob, MessagingService.current_version);
        assertEquals(serializedSize, dob.getLength());

        // deserialize
        DataInputPlus dip = new DataInputBuffer(dob.buffer(), true);
        HintMessage deserializedMessage = HintMessage.serializer.deserialize(dip, MessagingService.current_version);

        // compare before/after
        assertEquals(hostId, deserializedMessage.hostId);
        assertNotNull(deserializedMessage.hint);
        assertHintsEqual(hint, deserializedMessage.hint);
    }

