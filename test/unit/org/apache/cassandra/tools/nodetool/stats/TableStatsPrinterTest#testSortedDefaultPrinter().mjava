    @Test
    public void testSortedDefaultPrinter() throws Exception
    {
        // test sorting
        StatsHolder holder = new TestTableStatsHolder(testKeyspaces, "reads", 0);
        StatsPrinter<StatsHolder> printer = TableStatsPrinter.from("reads", true);
        try (ByteArrayOutputStream byteStream = new ByteArrayOutputStream())
        {
            printer.print(holder, new PrintStream(byteStream));
            assertEquals("StatsTablePrinter.SortedDefaultPrinter does not print sorted tables as expected",
                         expectedSortedDefaultPrinterOutput, byteStream.toString());
            byteStream.reset();
            // test sorting and filtering top k, where k < total number of tables
            String sortKey = "reads";
            int top = 4;
            holder = new TestTableStatsHolder(testKeyspaces, sortKey, top);
            printer = TableStatsPrinter.from(sortKey, true);
            printer.print(holder, new PrintStream(byteStream));
            assertEquals("StatsTablePrinter.SortedDefaultPrinter does not print top K sorted tables as expected",
                         String.format(expectedSortedDefaultPrinterTopOutput, sortKey), byteStream.toString());
            byteStream.reset();
            // test sorting and filtering top k, where k >= total number of tables
            sortKey = "reads";
            top = 10;
            holder = new TestTableStatsHolder(testKeyspaces, sortKey, top);
            printer = TableStatsPrinter.from(sortKey, true);
            printer.print(holder, new PrintStream(byteStream));
            assertEquals("StatsTablePrinter.SortedDefaultPrinter does not print top K sorted tables as expected for large values of K",
                         String.format(expectedSortedDefaultPrinterLargeTopOutput, sortKey), byteStream.toString());
        }
    }

