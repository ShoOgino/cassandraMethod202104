    @Test
    public void testRecyclePartialFreeChunk()
    {
        // normal chunk size is 128kb
        int halfNormalChunk = BufferPool.NORMAL_CHUNK_SIZE / 2; // 64kb, half of normal chunk
        List<ByteBuffer> toRelease = new ArrayList<>();

        // allocate three buffers on different chunks
        ByteBuffer buffer0 = bufferPool.get(halfNormalChunk, BufferType.OFF_HEAP);
        BufferPool.Chunk chunk0 = BufferPool.Chunk.getParentChunk(buffer0);
        assertFalse(chunk0.isFree());
        allocate(1, halfNormalChunk, toRelease); // allocate remaining buffers in the chunk

        ByteBuffer buffer1 = bufferPool.get(halfNormalChunk, BufferType.OFF_HEAP);
        BufferPool.Chunk chunk1 = BufferPool.Chunk.getParentChunk(buffer1);
        assertFalse(chunk1.isFree());
        assertNotEquals(chunk0, chunk1);
        allocate(1, halfNormalChunk, toRelease); // allocate remaining buffers in the chunk

        ByteBuffer buffer2 = bufferPool.get(halfNormalChunk, BufferType.OFF_HEAP);
        BufferPool.Chunk chunk2 = BufferPool.Chunk.getParentChunk(buffer2);
        assertFalse(chunk2.isFree());
        assertNotEquals(chunk0, chunk2);
        assertNotEquals(chunk1, chunk2);
        allocate(1, halfNormalChunk, toRelease); // allocate remaining buffers in the chunk

        // now all 3 chunks in local pool is full, allocate one more buffer to evict chunk2
        ByteBuffer buffer3 = bufferPool.get(halfNormalChunk, BufferType.OFF_HEAP);
        BufferPool.Chunk chunk3 = BufferPool.Chunk.getParentChunk(buffer3);
        assertNotEquals(chunk0, chunk3);
        assertNotEquals(chunk1, chunk3);
        assertNotEquals(chunk2, chunk3);

        // verify chunk2 got evicted, it doesn't have a owner
        assertNotNull(chunk0.owner());
        assertEquals(BufferPool.Chunk.Status.IN_USE, chunk0.status());
        assertNotNull(chunk1.owner());
        assertEquals(BufferPool.Chunk.Status.IN_USE, chunk1.status());
        assertNull(chunk2.owner());
        assertEquals(BufferPool.Chunk.Status.EVICTED, chunk2.status());

        // release half buffers for chunk0/1/2
        release(toRelease);
        BufferPool.Chunk partiallyFreed = chunk2;

        // try to recirculate chunk2 and verify freed space
        assertFalse(bufferPool.globalPool().isFullyFreed(partiallyFreed));
        assertTrue(bufferPool.globalPool().isPartiallyFreed(partiallyFreed));
        assertEquals(BufferPool.Chunk.Status.IN_USE, partiallyFreed.status());
        assertEquals(halfNormalChunk, partiallyFreed.free());
        ByteBuffer buffer = partiallyFreed.get(halfNormalChunk, false, null);
        assertEquals(halfNormalChunk, buffer.capacity());

        // cleanup allocated buffers
        for (ByteBuffer buf : Arrays.asList(buffer0, buffer1, buffer2, buffer3, buffer))
            bufferPool.put(buf);

        // verify that fully freed chunk are prioritized over partially freed chunks
        List<BufferPool.Chunk> remainingChunks = new ArrayList<>();
        BufferPool.Chunk chunkForAllocation;
        while ((chunkForAllocation = bufferPool.globalPool().get()) != null)
            remainingChunks.add(chunkForAllocation);

        int totalNormalChunks = BufferPool.GlobalPool.MACRO_CHUNK_SIZE / BufferPool.NORMAL_CHUNK_SIZE; // 64;
        assertEquals(totalNormalChunks, remainingChunks.size());
        assertSame(partiallyFreed, remainingChunks.get(remainingChunks.size() - 1)); // last one is partially freed

        // cleanup polled chunks
        remainingChunks.forEach(BufferPool.Chunk::release);
    }

