    @Test
    public void testBookKeeping() throws ExecutionException, InterruptedException
    {
        final Runnable test = () -> {
            // allocate normal, check accounted and not cleaned
            allocator.allocate(10, group);
            verifyUsedReclaiming(10, 0);

            // confirm adjustment works
            allocator.offHeap().adjust(-10, group);
            verifyUsedReclaiming(0, 0);

            allocator.offHeap().adjust(10, group);
            verifyUsedReclaiming(10, 0);

            // confirm we cannot allocate negative
            boolean success = false;
            try
            {
                allocator.offHeap().allocate(-10, group);
            }
            catch (AssertionError e)
            {
                success = true;
            }

            Assert.assertTrue(success);
            Uninterruptibles.sleepUninterruptibly(10L, TimeUnit.MILLISECONDS);
            Assert.assertEquals(1, isClean.getCount());

            // allocate above watermark
            allocator.allocate(70, group);
            verifyUsedReclaiming(80, 0);

            // let the cleaner run, it will release 80 bytes
            canClean.countDown();
            try
            {
                isClean.await(10L, TimeUnit.MILLISECONDS);
            }
            catch (InterruptedException e)
            {
                throw new AssertionError();
            }
            Assert.assertEquals(0, isClean.getCount());
            verifyUsedReclaiming(0, 0);

            // allocate, then set discarding, then allocated some more
            allocator.allocate(30, group);
            verifyUsedReclaiming(30, 0);
            allocator.setDiscarding();
            Assert.assertFalse(allocator.isLive());
            verifyUsedReclaiming(30, 30);
            allocator.allocate(50, group);
            verifyUsedReclaiming(80, 80);

            // allocate above limit, check we block until "marked blocking"
            exec.schedule(markBlocking, 10L, TimeUnit.MILLISECONDS);
            allocator.allocate(30, group);
            Assert.assertNotNull(barrier.get());
            verifyUsedReclaiming(110, 110);

            // release everything
            allocator.setDiscarded();
            Assert.assertFalse(allocator.isLive());
            verifyUsedReclaiming(0, 0);
        };
        exec.submit(test).get();
    }

