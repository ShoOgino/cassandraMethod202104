    @Test
    public void testOverflowAllocation()
    {
        int macroChunkSize = BufferPool.GlobalPool.MACRO_CHUNK_SIZE;
        int allocationSize = BufferPool.NORMAL_CHUNK_SIZE;
        int allocations = BufferPool.GlobalPool.MACRO_CHUNK_SIZE / allocationSize;

        // occupy entire buffer pool
        List<ByteBuffer> buffers = new ArrayList<>();
        allocate(allocations, allocationSize, buffers);

        assertEquals(macroChunkSize, bufferPool.sizeInBytes());
        assertEquals(macroChunkSize, bufferPool.usedSizeInBytes());
        assertEquals(0, bufferPool.overflowMemoryInBytes());

        // allocate overflow due to pool exhaust
        ByteBuffer overflowBuffer = bufferPool.get(BufferPool.NORMAL_ALLOCATION_UNIT, BufferType.OFF_HEAP);

        assertEquals(macroChunkSize + overflowBuffer.capacity(), bufferPool.sizeInBytes());
        assertEquals(macroChunkSize + overflowBuffer.capacity(), bufferPool.usedSizeInBytes());
        assertEquals(overflowBuffer.capacity(), bufferPool.overflowMemoryInBytes());

        // free all buffer
        bufferPool.put(overflowBuffer);
        release(buffers);

        assertEquals(macroChunkSize, bufferPool.sizeInBytes());
        assertEquals(0, bufferPool.usedSizeInBytes());
        assertEquals(0, bufferPool.overflowMemoryInBytes());

        // allocate overflow due to on-heap
        overflowBuffer = bufferPool.get(BufferPool.NORMAL_ALLOCATION_UNIT, BufferType.ON_HEAP);
        assertEquals(macroChunkSize + overflowBuffer.capacity(), bufferPool.sizeInBytes());
        assertEquals(overflowBuffer.capacity(), bufferPool.usedSizeInBytes());
        assertEquals(overflowBuffer.capacity(), bufferPool.overflowMemoryInBytes());
        bufferPool.put(overflowBuffer);

        // allocate overflow due to over allocation size
        overflowBuffer = bufferPool.get(2 * BufferPool.NORMAL_CHUNK_SIZE, BufferType.ON_HEAP);
        assertEquals(macroChunkSize + overflowBuffer.capacity(), bufferPool.sizeInBytes());
        assertEquals(overflowBuffer.capacity(), bufferPool.usedSizeInBytes());
        assertEquals(overflowBuffer.capacity(), bufferPool.overflowMemoryInBytes());
    }

