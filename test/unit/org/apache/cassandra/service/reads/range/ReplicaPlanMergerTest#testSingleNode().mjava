    /**
     * Tests range merging with a single node cluster and a read consistency level that allows to merge ranges.
     */
    @Test
    public void testSingleNode()
    {
        new TokenUpdater().withTokens(10, 20, 30, 40).update();

        // with CLs requiring a single node all ranges are merged (unless they are wrapping)
        for (ConsistencyLevel cl : Arrays.asList(ONE, LOCAL_ONE, ANY))
        {
            testRanges(cl, range(min(), min()));
            testRanges(cl, range(min(), max(25)));
            testRanges(cl, range(min(), max(40)));
            testRanges(cl, range(min(), max(50)));
            testRanges(cl, range(max(20), max(30)));
            testRanges(cl, range(max(25), min()));
            testRanges(cl, range(max(25), max(35)));
            testRanges(cl, range(max(50), min()));
            testRanges(cl, range(max(40), max(10)), range(max(40), min()), range(min(), max(10))); // wrapped is split
            testRanges(cl, range(max(25), max(15)), range(max(25), min()), range(min(), max(15))); // wrapped is split
        }

        // with CLs requiring more than a single node ranges are not merged due to the RF=2
        for (ConsistencyLevel cl : Arrays.asList(ALL, QUORUM, LOCAL_QUORUM, EACH_QUORUM, TWO, THREE, SERIAL, LOCAL_SERIAL))
        {
            testRanges(cl,
                       range(min(), min()),
                       range(min(), max(10)),
                       range(max(10), max(20)),
                       range(max(20), max(30)),
                       range(max(30), max(40)),
                       range(max(40), min()));
            testRanges(cl,
                       range(min(), max(25)),
                       range(min(), max(10)), range(max(10), max(20)), range(max(20), max(25)));
            testRanges(cl,
                       range(min(), max(40)),
                       range(min(), max(10)), range(max(10), max(20)), range(max(20), max(30)), range(max(30), max(40)));
            testRanges(cl,
                       range(min(), max(50)),
                       range(min(), max(10)),
                       range(max(10), max(20)),
                       range(max(20), max(30)),
                       range(max(30), max(40)),
                       range(max(40), max(50)));
            testRanges(cl,
                       range(max(20), max(30)));
            testRanges(cl,
                       range(max(25), min()),
                       range(max(25), max(30)), range(max(30), max(40)), range(max(40), min()));
            testRanges(cl,
                       range(max(50), min()));
            testRanges(cl,
                       range(max(30), max(10)), // wrapped
                       range(max(30), max(40)), range(max(40), min()), range(min(), max(10)));
            testRanges(cl,
                       range(max(25), max(15)), // wrapped
                       range(max(25), max(30)),
                       range(max(30), max(40)),
                       range(max(40), min()),
                       range(min(), max(10)),
                       range(max(10), max(15)));
        }
    }

