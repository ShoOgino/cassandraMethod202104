    @Test
    public void testExpirationOnAdd()
    {
        FreeRunningClock clock = new FreeRunningClock(approxTime.now());

        List<Message> expiredMessages = new LinkedList<>();
        long startTime = clock.now();

        OutboundMessageQueue queue = new OutboundMessageQueue(clock, m -> expiredMessages.add(m));

        Message<?> m1 = Message.out(Verb._TEST_1, noPayload, startTime + TimeUnit.SECONDS.toNanos(7));
        Message<?> m2 = Message.out(Verb._TEST_1, noPayload, startTime + TimeUnit.SECONDS.toNanos(3));
        queue.add(m1);
        queue.add(m2);

        // Check next expiry time is equal to m2, and we haven't expired anything yet:
        Assert.assertEquals(3, queue.nextExpirationIn(startTime, TimeUnit.SECONDS));
        Assert.assertTrue(expiredMessages.isEmpty());

        // Go past m1 expiry time:
        clock.advance(8, TimeUnit.SECONDS);

        // Add a new message and verify both m1 and m2 have been expired:
        Message<?> m3 = Message.out(Verb._TEST_1, noPayload, startTime + TimeUnit.SECONDS.toNanos(10));
        queue.add(m3);
        Assert.assertEquals(m2, expiredMessages.remove(0));
        Assert.assertEquals(m1, expiredMessages.remove(0));

        // New expiration deadline is m3:
        Assert.assertEquals(10, queue.nextExpirationIn(startTime, TimeUnit.SECONDS));

        // Go past m3 expiry time:
        clock.advance(4, TimeUnit.SECONDS);

        try(OutboundMessageQueue.WithLock l = queue.lockOrCallback(clock.now(), () -> {}))
        {
            // Add a new message and verify nothing is expired because the lock is held by this iteration:
            Message<?> m4 = Message.out(Verb._TEST_1, noPayload, startTime + TimeUnit.SECONDS.toNanos(15));
            queue.add(m4);
            Assert.assertTrue(expiredMessages.isEmpty());

            // Also the deadline didn't change, even though we're past the m3 expiry time: this way we're sure the
            // pruner will run promptly even if falling behind during iteration.
            Assert.assertEquals(10, queue.nextExpirationIn(startTime, TimeUnit.SECONDS));
        }

        // Check post iteration m3 has expired:
        Assert.assertEquals(m3, expiredMessages.remove(0));
        // And deadline is now m4:
        Assert.assertEquals(15, queue.nextExpirationIn(startTime, TimeUnit.SECONDS));
    }

