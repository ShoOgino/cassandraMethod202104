    @Test
    public void testExpirationOnIteration()
    {
        FreeRunningClock clock = new FreeRunningClock(approxTime.now());

        List<Message> expiredMessages = new LinkedList<>();
        long startTime = clock.now();

        Message<?> m1 = Message.out(Verb._TEST_1, noPayload, startTime + TimeUnit.SECONDS.toNanos(7));
        Message<?> m2 = Message.out(Verb._TEST_1, noPayload, startTime + TimeUnit.SECONDS.toNanos(3));
        Message<?> m3;
        Message<?> m4;

        OutboundMessageQueue queue = new OutboundMessageQueue(clock, m -> expiredMessages.add(m));
        queue.add(m1);
        queue.add(m2);

        try(OutboundMessageQueue.WithLock l = queue.lockOrCallback(clock.now(), () -> {}))
        {
            // Do nothing
        }
        // Check next expiry time is equal to m2, and we haven't expired anything yet:
        Assert.assertEquals(3, queue.nextExpirationIn(startTime, TimeUnit.SECONDS));
        Assert.assertTrue(expiredMessages.isEmpty());

        // Wait for m2 expiry time:
        clock.advance(4, TimeUnit.SECONDS);

        try(OutboundMessageQueue.WithLock l = queue.lockOrCallback(clock.now(), () -> {}))
        {
            // Add a new message while we're iterating the queue: this will expire later than any existing message.
            m3 = Message.out(Verb._TEST_1, noPayload, startTime + TimeUnit.SECONDS.toNanos(60));
            queue.add(m3);
        }
        // After expiration runs following the WithLock#close(), check the expiration time is updated to m1 (not m3):
        Assert.assertEquals(7, queue.nextExpirationIn(startTime, TimeUnit.SECONDS));
        // Also, m2 was expired and collected:
        Assert.assertEquals(m2, expiredMessages.remove(0));

        // Wait for m1 expiry time:
        clock.advance(4, TimeUnit.SECONDS);

        try(OutboundMessageQueue.WithLock l = queue.lockOrCallback(clock.now(), () -> {}))
        {
            // Add a new message while we're iterating the queue: this will expire sooner than the already existing message.
            m4 = Message.out(Verb._TEST_1, noPayload, startTime + TimeUnit.SECONDS.toNanos(10));
            queue.add(m4);
        }
        // Check m1 was expired and collected:
        Assert.assertEquals(m1, expiredMessages.remove(0));
        // Check next expiry time is m4 (not m3):
        Assert.assertEquals(10, queue.nextExpirationIn(startTime, TimeUnit.SECONDS));

        // Consume all messages before expiration:
        try(OutboundMessageQueue.WithLock l = queue.lockOrCallback(clock.now(), () -> {}))
        {
            Assert.assertEquals(m3, l.poll());
            Assert.assertEquals(m4, l.poll());
        }
        // Check next expiry time is still m4 as the deadline hasn't passed yet:
        Assert.assertEquals(10, queue.nextExpirationIn(startTime, TimeUnit.SECONDS));

        // Go past the deadline:
        clock.advance(4, TimeUnit.SECONDS);

        try(OutboundMessageQueue.WithLock l = queue.lockOrCallback(clock.now(), () -> {}))
        {
            // Do nothing, just trigger expiration on close
        }
        // Check nothing is expired:
        Assert.assertTrue(expiredMessages.isEmpty());
        // Check next expiry time is now Long.MAX_VALUE as nothing was in the queue:
        Assert.assertEquals(Long.MAX_VALUE, queue.nextExpirationIn(0, TimeUnit.NANOSECONDS));
    }

