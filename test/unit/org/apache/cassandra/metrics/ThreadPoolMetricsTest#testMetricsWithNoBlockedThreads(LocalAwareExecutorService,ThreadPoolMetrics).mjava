    private static void testMetricsWithNoBlockedThreads(LocalAwareExecutorService threadPool, ThreadPoolMetrics metrics)
    {
        spinAssertEquals(0, metrics.activeTasks::getValue);
        spinAssertEquals(0L, metrics.completedTasks::getValue);
        spinAssertEquals(0, metrics.pendingTasks::getValue);
        spinAssertEquals(0L, metrics.currentBlocked::getCount);
        spinAssertEquals(0L, metrics.totalBlocked::getCount);

        BlockingTask task1 = new BlockingTask();
        BlockingTask task2 = new BlockingTask();
        BlockingTask task3 = new BlockingTask();
        BlockingTask task4 = new BlockingTask();

        // The ThreadPool has a size of 2 so the 2 first tasks should go into active straight away
        threadPool.execute(task1);

        spinAssertEquals(1, metrics.activeTasks::getValue);
        spinAssertEquals(0L, metrics.completedTasks::getValue);
        spinAssertEquals(0, metrics.pendingTasks::getValue);
        spinAssertEquals(0L, metrics.currentBlocked::getCount);
        spinAssertEquals(0L, metrics.totalBlocked::getCount);

        threadPool.execute(task2);

        spinAssertEquals(2, metrics.activeTasks::getValue);
        spinAssertEquals(0L, metrics.completedTasks::getValue);
        spinAssertEquals(0, metrics.pendingTasks::getValue);
        spinAssertEquals(0L, metrics.currentBlocked::getCount);
        spinAssertEquals(0L, metrics.totalBlocked::getCount);

        // There are no threads available any more the 2 next tasks should go into the queue
        threadPool.execute(task3);

        spinAssertEquals(2, metrics.activeTasks::getValue);
        spinAssertEquals(0L, metrics.completedTasks::getValue);
        spinAssertEquals(1, metrics.pendingTasks::getValue);
        spinAssertEquals(0L, metrics.currentBlocked::getCount);
        spinAssertEquals(0L, metrics.totalBlocked::getCount);

        threadPool.execute(task4);

        spinAssertEquals(2, metrics.activeTasks::getValue);
        spinAssertEquals(0L, metrics.completedTasks::getValue);
        spinAssertEquals(2, metrics.pendingTasks::getValue);
        spinAssertEquals(0L, metrics.currentBlocked::getCount);
        spinAssertEquals(0L, metrics.totalBlocked::getCount);

        // Allowing first task to complete
        task1.allowToComplete();

        spinAssertEquals(true, task3::isStarted);
        spinAssertEquals(2, metrics.activeTasks::getValue);
        spinAssertEquals(1L, metrics.completedTasks::getValue);
        spinAssertEquals(1, metrics.pendingTasks::getValue);
        spinAssertEquals(0L, metrics.currentBlocked::getCount);
        spinAssertEquals(0L, metrics.totalBlocked::getCount);

        // Allowing second task to complete
        task2.allowToComplete();

        spinAssertEquals(true, task4::isStarted);
        spinAssertEquals(2, metrics.activeTasks::getValue);
        spinAssertEquals(2L, metrics.completedTasks::getValue);
        spinAssertEquals(0, metrics.pendingTasks::getValue);
        spinAssertEquals(0L, metrics.currentBlocked::getCount);
        spinAssertEquals(0L, metrics.totalBlocked::getCount);

        // Allowing third task to complete
        task3.allowToComplete();

        spinAssertEquals(1, metrics.activeTasks::getValue);
        spinAssertEquals(3L, metrics.completedTasks::getValue);
        spinAssertEquals(0, metrics.pendingTasks::getValue);
        spinAssertEquals(0L, metrics.currentBlocked::getCount);
        spinAssertEquals(0L, metrics.totalBlocked::getCount);

        // Allowing fourth task to complete
        task4.allowToComplete();

        spinAssertEquals(0, metrics.activeTasks::getValue);
        spinAssertEquals(4L, metrics.completedTasks::getValue);
        spinAssertEquals(0, metrics.pendingTasks::getValue);
        spinAssertEquals(0L, metrics.currentBlocked::getCount);
        spinAssertEquals(0L, metrics.totalBlocked::getCount);
    }

