    @Test
    public void testMetricsSize()
    {
        // basically want to test changes in the metric being reported as the buffer pool grows - starts at zero
        assertThat(metrics.size.getValue()).isEqualTo(bufferPool.sizeInBytes())
                                           .isEqualTo(0);

        // the idea is to test changes in the sizeOfBufferPool metric which starts at zero. it will bump up
        // after the first request for a ByteBuffer and the idea from there will be to keep requesting them
        // until it bumps a second time at which point there should be some confidence that thie metric is
        // behaving as expected. these assertions should occur well within the value of the MEMORY_USAGE_THRESHOLD
        // given the maxBufferSize (just covering the case of the weirdest random seed in the multiverse i guess - a
        // while loop might have sufficed as well but a definitive termination seemed nicer)
        final long seed = System.currentTimeMillis();
        final Random rand = new Random(seed);
        final String assertionMessage = String.format("Failed with seed of %s", seed);
        final long maxIterations = bufferPool.memoryUsageThreshold();
        final int maxBufferSize = BufferPool.NORMAL_CHUNK_SIZE - 1;
        int nextSizeToRequest;
        long totalBytesRequestedFromPool = 0;
        long initialSizeInBytesAfterZero = 0;
        boolean exitedBeforeMax = false;
        for (int ix = 0; ix < maxIterations; ix++)
        {
            nextSizeToRequest = rand.nextInt(maxBufferSize) + 1;
            totalBytesRequestedFromPool = totalBytesRequestedFromPool + nextSizeToRequest;
            bufferPool.get(nextSizeToRequest, BufferType.OFF_HEAP);

            assertThat(metrics.size.getValue()).as(assertionMessage)
                                               .isEqualTo(bufferPool.sizeInBytes())
                                               .isGreaterThanOrEqualTo(totalBytesRequestedFromPool);

            if (initialSizeInBytesAfterZero == 0)
            {
                initialSizeInBytesAfterZero = bufferPool.sizeInBytes();
            }
            else
            {
                // when the total bytes requested from the pool exceeds the initial size we should have
                // asserted a bump in the sizeInBytes which means that we've asserted the metric increasing
                // as a result of that bump - can stop trying to grow the pool further
                if (totalBytesRequestedFromPool > initialSizeInBytesAfterZero)
                {
                    exitedBeforeMax = true;
                    break;
                }
            }
        }

        assertThat(exitedBeforeMax).as(assertionMessage).isTrue();
        assertEquals(0, metrics.misses.getCount());
    }

