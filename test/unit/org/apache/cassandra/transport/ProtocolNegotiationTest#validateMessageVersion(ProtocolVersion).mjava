    private void validateMessageVersion(ProtocolVersion version)
    {
        SimpleClient.Builder builder = SimpleClient.builder(nativeAddr.getHostAddress(), nativePort)
                                                   .protocolVersion(version);
        if (version.isBeta())
            builder.useBeta();

        Random r = new Random();
        ProtocolVersion wrongVersion = version;
        while (wrongVersion.isSmallerThan(ProtocolVersion.MIN_SUPPORTED_VERSION) || wrongVersion == version)
            wrongVersion = ProtocolVersion.values()[r.nextInt(ProtocolVersion.values().length - 1)];

        try (SimpleClient client = builder.build().connect(false))
        {
            // The connection has been negotiated to use $version. Force the next message to be
            // encoded with a different version and it should trigger a ProtocolException
            final ProtocolVersion v = wrongVersion;
            QueryMessage query = new QueryMessage("SELECT * FROM system.local", QueryOptions.DEFAULT)
            {
                @Override
                public Envelope encode(ProtocolVersion originalVersion)
                {
                    return super.encode(v);
                }
            };
            try
            {
                client.execute(query);
                fail("Expected a protocol exception");
            }
            catch (RuntimeException e)
            {
                assertTrue(e.getCause() instanceof TransportException);
                assertTrue(e.getCause().getMessage().startsWith("Invalid message version"));
            }
        }
        catch (IOException e)
        {
            e.printStackTrace();
            fail("Error establishing connection");
        }
    }

