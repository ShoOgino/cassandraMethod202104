    @Test
    public void handleCorruptionOfLargeMessage() throws Throwable
    {
        // A corrupt messaging frame should terminate the connection as clients
        // generally don't track which stream IDs are present in the frame, and the
        // server has no way to signal which streams are affected.
        // Before closing, the server should send an ErrorMessage to inform the
        // client of the corrupt message.
        // Client needs to expect multiple responses or else awaitResponses returns
        // after the error is first received and we race between handling the exception
        // caused by remote disconnection and checking the connection status.
        int messageCount = 2;
        Codec codec = Codec.crc(alloc);
        AllocationObserver observer = new AllocationObserver();
        InboundProxyHandler.Controller controller = new InboundProxyHandler.Controller();

        ServerConfigurator configurator = ServerConfigurator.builder()
                                                            .withAllocationObserver(observer)
                                                            .withProxyController(controller)
                                                            .build();
        Server server = server(configurator);
        Client client = new Client(codec, messageCount);
        server.start();
        client.connect(address, port);
        assertTrue(client.isConnected());

        // Only install the corrupting transform after protocol negotiation is complete
        controller.withPayloadTransform(new Function<Object, Object>()
        {
            // Don't corrupt the first frame as this would fail early and bypass capacity allocation.
            // Instead, allow enough bytes to fill the first frame through untouched. Then, corrupt
            // a byte which will be in the second frame of the large message .
            int seenBytes = 0;
            int corruptedByte = 0;
            public Object apply(Object o)
            {
                // If we've already injected some corruption, pass through
                if (corruptedByte > 0)
                    return o;

                // Will the current buffer size take us into the second frame? If so, corrupt it
                ByteBuf bb = (ByteBuf)o;
                if (seenBytes + bb.readableBytes() > MAX_FRAMED_PAYLOAD_SIZE + 100)
                {
                    int frameBoundary = MAX_FRAMED_PAYLOAD_SIZE - seenBytes;
                    corruptedByte = bb.readerIndex() + frameBoundary + 100;
                    bb.setByte(corruptedByte, 0xffff);
                }
                else
                {
                    seenBytes += bb.readableBytes();
                }

                return bb;
            }
        });

        int totalBytes = MAX_FRAMED_PAYLOAD_SIZE * 2;
        client.send(randomEnvelope(0, Message.Type.OPTIONS, totalBytes, totalBytes));
        client.awaitResponses();
        // Client has disconnected
        assertFalse(client.isConnected());
        // But before it did, it received an error response
        Envelope received = client.inboundMessages.poll();
        assertNotNull(received);
        Message.Response response = Message.responseDecoder().decode(client.channel, received);
        assertEquals(Message.Type.ERROR, response.type);
        assertTrue(((ErrorMessage)response).error.getMessage().contains("unrecoverable CRC mismatch detected in frame"));
        // total capacity is aquired when the first frame is read
        observer.verifier().accept(totalBytes);
    }

