        private void put(ByteBuffer buffer, Chunk chunk)
        {
            LocalPool owner = chunk.owner;
            if (owner != null && owner == tinyPool)
            {
                tinyPool.put(buffer, chunk);
                return;
            }

            // ask the free method to take exclusive ownership of the act of recycling if chunk is owned by ourselves
            long free = chunk.free(buffer, owner == this && recycleWhenFree);
            // free:
            // *     0L: current pool must be the owner. we can fully recyle the chunk.
            // *    -1L:
            //          * for normal chunk:
            //              a) if it has owner, do nothing.
            //              b) if it not owner, try to recyle it either fully or partially if not already recyled.
            //          * for tiny chunk:
            //              a) if it has owner, do nothing.
            //              b) if it has not owner, recycle the tiny chunk back to parent chunk
            // * others:
            //          * for normal chunk:  partial recycle the chunk if it can be partially recycled but not yet recycled.
            //          * for tiny chunk: do nothing.
            if (free == 0L)
            {
                assert owner == this;
                // 0L => we own recycling responsibility, so must recycle;
                // We must remove the Chunk from our local queue
                remove(chunk);
                chunk.recycle();
            }
            else if (free == -1L && owner != this && chunk.owner == null && !chunk.recycler.canRecyclePartially())
            {
                // although we try to take recycle ownership cheaply, it is not always possible to do so if the owner is racing to unset.
                // we must also check after completely freeing if the owner has since been unset, and try to recycle
                chunk.tryRecycle();
            }
            else if (chunk.owner == null && chunk.recycler.canRecyclePartially() && chunk.setInUse(Chunk.Status.EVICTED))
            {
                // re-cirlate partially freed normal chunk to global list
                chunk.partiallyRecycle();
            }

            if (owner == this)
            {
                MemoryUtil.setAttachment(buffer, null);
                MemoryUtil.setDirectByteBuffer(buffer, 0, 0);
                reuseObjects.add(buffer);
            }
        }

