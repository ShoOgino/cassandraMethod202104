    @Override
    public T get() {
        // Another variant of Double Checked Locking.
        //
        // We use two volatile reads.  We could reduce this to one by
        // putting our fields into a holder class, but (at least on x86)
        // the extra memory consumption and indirection are more
        // expensive than the extra volatile reads.
        long nanos = this.expirationNanos;
        long now = System.nanoTime();
        if (nanos == 0L || now - nanos >= 0L) {
            synchronized(this) {
                if (nanos == this.expirationNanos) {
                    ReturnValue<T> t = this.delegate.get();
                    if (t.canMemoize())
                        this.value = t.value();
                    else
                        return t.value();

                    nanos = now + this.durationNanos;
                    this.expirationNanos = nanos == 0L ? 1L : nanos;
                    return t.value();
                }
            }
        }
        return this.value;
    }

