        /**
         *  Finds nearest points <i>p1</i> and <i>p2</i> in the collection
         *  Replaces these two points with one weighted point <i>p3 = (p1*m1+p2*m2)/(p1+p2)
         */
        @VisibleForTesting
        void mergeNearestPoints()
        {
            assert isFull() : "DataHolder must be full in order to merge two points";

            final int[] smallestDifference = findPointPairWithSmallestDistance();

            final int point1 = smallestDifference[0];
            final int point2 = smallestDifference[1];

            long key = wrap(point1, 0);
            int index = Arrays.binarySearch(data, key);
            if (index < 0)
            {
                index = -index - 1;
                assert (index < data.length) : "Not found in array";
                assert (unwrapPoint(data[index]) == point1) : "Not found in array";
            }

            long value1 = unwrapValue(data[index]);
            long value2 = unwrapValue(data[index + 1]);

            assert (unwrapPoint(data[index + 1]) == point2) : "point2 should follow point1";

            long sum = value1 + value2;

            //let's evaluate in long values to handle overflow in multiplication
            int newPoint = saturatingCastToInt((point1 * value1 + point2 * value2) / sum);
            newPoint = ceilKey(newPoint, roundSeconds);
            data[index] = wrap(newPoint, saturatingCastToInt(sum));

            System.arraycopy(data, index + 2, data, index + 1, data.length - index - 2);
            data[data.length - 1] = EMPTY;
        }

