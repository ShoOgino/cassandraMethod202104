    /*
     * Handling of multi-frame large messages
     */
    protected boolean processFirstFrameOfLargeMessage(IntactFrame frame, Limit endpointReserve, Limit globalReserve) throws IOException
    {
        ShareableBytes bytes = frame.contents;
        ByteBuffer buf = bytes.get();
        try
        {
            Envelope.Header header = envelopeDecoder.extractHeader(buf);
            // max CQL message size defaults to 256mb, so should be safe to downcast
            int messageSize = Ints.checkedCast(header.bodySizeInBytes);
            receivedBytes += buf.remaining();

            if (throwOnOverload)
            {
                LargeMessage largeMessage = new LargeMessage(header);
                if (!acquireCapacity(header, endpointReserve, globalReserve))
                {
                    // discard the request and throw an exception
                    ClientMetrics.instance.markRequestDiscarded();
                    logger.trace("Discarded request of size: {}. InflightChannelRequestPayload: {}, " +
                                 "InflightEndpointRequestPayload: {}, InflightOverallRequestPayload: {}, Header: {}",
                                 messageSize,
                                 channelPayloadBytesInFlight,
                                 endpointReserve.using(),
                                 globalReserve.using(),
                                 header);

                    // mark as overloaded so that we consume
                    // subsequent frames and then discard the message
                    largeMessage.markOverloaded();
                }
                this.largeMessage = largeMessage;
                largeMessage.supply(frame);
                // Don't stop processing incoming frames, rely on the client to apply
                // backpressure when it receives OverloadedException
                return true;
            }
            else
            {
                if (!acquireCapacityAndQueueOnFailure(header, endpointReserve, globalReserve))
                {
                    receivedBytes += frame.frameSize;
                    return false;
                }
            }

            largeMessage = new LargeMessage(header);
            largeMessage.supply(frame);
            return true;
        }
        catch (Exception e)
        {
            throw new IOException("Error decoding CQL Message", e);
        }
    }

