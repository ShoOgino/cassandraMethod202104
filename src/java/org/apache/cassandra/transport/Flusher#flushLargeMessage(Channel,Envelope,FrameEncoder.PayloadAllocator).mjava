    private void flushLargeMessage(Channel channel, Envelope outbound, FrameEncoder.PayloadAllocator allocator)
    {
        FrameEncoder.Payload payload;
        ByteBuffer buf;
        ByteBuf body = outbound.body;
        boolean firstFrame = true;
        // Highly unlikely that the body of a large message would be empty, but the check is cheap
        while (body.readableBytes() > 0 || firstFrame)
        {
            int payloadSize = Math.min(body.readableBytes(), MAX_FRAMED_PAYLOAD_SIZE);
            payload = allocator.allocate(false, payloadSize);
            if (logger.isTraceEnabled())
            {
                logger.trace("Allocated initial buffer of {} for 1 large item",
                             FBUtilities.prettyPrintMemory(payload.buffer.capacity()));
            }

            buf = payload.buffer;
            // BufferPool may give us a buffer larger than we asked for.
            // FrameEncoder may object if buffer.remaining is >= MAX_SIZE.
            if (payloadSize >= MAX_FRAMED_PAYLOAD_SIZE)
                buf.limit(MAX_FRAMED_PAYLOAD_SIZE);

            if (firstFrame)
            {
                outbound.encodeHeaderInto(buf);
                firstFrame = false;
            }

            int remaining = Math.min(buf.remaining(), body.readableBytes());
            if (remaining > 0)
                buf.put(body.slice(body.readerIndex(), remaining).nioBuffer());

            body.readerIndex(body.readerIndex() + remaining);
            writeAndFlush(channel, payload);
        }
    }

