    // remove duplicated deprecated states
    private static EndpointState removeRedundantApplicationStates(EndpointState remoteState)
    {
        if (remoteState.states().isEmpty())
            return remoteState;

        Map<ApplicationState, VersionedValue> updatedStates = remoteState.states().stream().filter(entry -> {
            // Filter out pre-4.0 versions of data for more complete 4.0 versions
            switch (entry.getKey())
            {
                case INTERNAL_IP:
                    return (null == remoteState.getApplicationState(ApplicationState.INTERNAL_ADDRESS_AND_PORT));
                case STATUS:
                    return (null == remoteState.getApplicationState(ApplicationState.STATUS_WITH_PORT));
                case RPC_ADDRESS:
                    return (null == remoteState.getApplicationState(ApplicationState.NATIVE_ADDRESS_AND_PORT));
                default:
                    return true;
            }
        }).collect(Collectors.toMap(Entry::getKey, Entry::getValue));

        EndpointState updated = new EndpointState(remoteState.getHeartBeatState(), updatedStates);
        if (!remoteState.isAlive()) updated.markDead();
        return updated;
    }

