    @Override
    protected ReplicaPlan.ForRangeRead computeNext()
    {
        if (!ranges.hasNext())
            return endOfData();

        ReplicaPlan.ForRangeRead current = ranges.next();

        // getRestrictedRange has broken the queried range into per-[vnode] token ranges, but this doesn't take
        // the replication factor into account. If the intersection of live endpoints for 2 consecutive ranges
        // still meets the CL requirements, then we can merge both ranges into the same RangeSliceCommand.
        while (ranges.hasNext())
        {
            // If the current range right is the min token, we should stop merging because CFS.getRangeSlice
            // don't know how to deal with a wrapping range.
            // Note: it would be slightly more efficient to have CFS.getRangeSlice on the destination nodes unwraps
            // the range if necessary and deal with it. However, we can't start sending wrapped range without breaking
            // wire compatibility, so it's likely easier not to bother;
            if (current.range().right.isMinimum())
                break;

            ReplicaPlan.ForRangeRead next = ranges.peek();
            ReplicaPlan.ForRangeRead merged = ReplicaPlans.maybeMerge(keyspace, consistency, current, next);
            if (merged == null)
                break;

            current = merged;
            ranges.next(); // consume the range we just merged since we've only peeked so far
        }
        return current;
    }

