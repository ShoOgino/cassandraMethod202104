    /**
     * Creates netty thread pools and event loops.
     */
    @VisibleForTesting
    synchronized void initialize()
    {
        if (initialized)
            return;

        if (useEpoll())
        {
            workerGroup = new EpollEventLoopGroup();
            logger.info("Netty using native Epoll event loop");
        }
        else
        {
            workerGroup = new NioEventLoopGroup();
            logger.info("Netty using Java NIO event loop");
        }

        int nativePort = DatabaseDescriptor.getNativeTransportPort();
        int nativePortSSL = DatabaseDescriptor.getNativeTransportPortSSL();
        InetAddress nativeAddr = DatabaseDescriptor.getRpcAddress();

        org.apache.cassandra.transport.Server.Builder builder = new org.apache.cassandra.transport.Server.Builder()
                                                                .withEventLoopGroup(workerGroup)
                                                                .withHost(nativeAddr);

        EncryptionOptions.TlsEncryptionPolicy encryptionPolicy = DatabaseDescriptor.getNativeProtocolEncryptionOptions().tlsEncryptionPolicy();
        Server regularPortServer;
        Server tlsPortServer = null;

        // If an SSL port is separately supplied for the native transport, listen for unencrypted connections on the
        // regular port, and encryption / optionally encrypted connections on the ssl port.
        if (nativePort != nativePortSSL)
        {
            regularPortServer = builder.withTlsEncryptionPolicy(EncryptionOptions.TlsEncryptionPolicy.UNENCRYPTED).withPort(nativePort).build();
            switch(encryptionPolicy)
            {
                case OPTIONAL: // FALLTHRU - encryption is optional on the regular port, but encrypted on the tls port.
                case ENCRYPTED:
                    tlsPortServer = builder.withTlsEncryptionPolicy(encryptionPolicy).withPort(nativePortSSL).build();
                    break;
                case UNENCRYPTED: // Should have been caught by DatabaseDescriptor.applySimpleConfig
                    throw new IllegalStateException("Encryption must be enabled in client_encryption_options for native_transport_port_ssl");
                default:
                    throw new IllegalStateException("Unrecognized TLS encryption policy: " + encryptionPolicy);
            }
        }
        // Otherwise, if only the regular port is supplied, listen as the encryption policy specifies
        else
        {
            regularPortServer = builder.withTlsEncryptionPolicy(encryptionPolicy).withPort(nativePort).build();
        }

        if (tlsPortServer == null)
        {
            servers = Collections.singleton(regularPortServer);
        }
        else
        {
            servers = Collections.unmodifiableList(Arrays.asList(regularPortServer, tlsPortServer));
        }

        ClientMetrics.instance.init(servers);

        initialized = true;
    }

