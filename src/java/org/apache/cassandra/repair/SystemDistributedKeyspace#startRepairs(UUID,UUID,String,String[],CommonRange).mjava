    public static void startRepairs(UUID id, UUID parent_id, String keyspaceName, String[] cfnames, CommonRange commonRange)
    {
        //Don't record repair history if an upgrade is in progress as version 3 nodes generates errors
        //due to schema differences
        boolean includeNewColumns = !Gossiper.instance.hasMajorVersion3Nodes();

        InetAddressAndPort coordinator = FBUtilities.getBroadcastAddressAndPort();
        Set<String> participants = Sets.newHashSet();
        Set<String> participants_v2 = Sets.newHashSet();

        for (InetAddressAndPort endpoint : commonRange.endpoints)
        {
            participants.add(endpoint.getHostAddress(false));
            participants_v2.add(endpoint.getHostAddressAndPort());
        }

        String query =
                "INSERT INTO %s.%s (keyspace_name, columnfamily_name, id, parent_id, range_begin, range_end, coordinator, coordinator_port, participants, participants_v2, status, started_at) " +
                        "VALUES (   '%s',          '%s',              %s, %s,        '%s',        '%s',      '%s',        %d,               { '%s' },     { '%s' },        '%s',   toTimestamp(now()))";
        String queryWithoutNewColumns =
                "INSERT INTO %s.%s (keyspace_name, columnfamily_name, id, parent_id, range_begin, range_end, coordinator, participants, status, started_at) " +
                        "VALUES (   '%s',          '%s',              %s, %s,        '%s',        '%s',      '%s',               { '%s' },        '%s',   toTimestamp(now()))";

        for (String cfname : cfnames)
        {
            for (Range<Token> range : commonRange.ranges)
            {
                String fmtQry;
                if (includeNewColumns)
                {
                    fmtQry = format(query, SchemaConstants.DISTRIBUTED_KEYSPACE_NAME, REPAIR_HISTORY,
                                    keyspaceName,
                                    cfname,
                                    id.toString(),
                                    parent_id.toString(),
                                    range.left.toString(),
                                    range.right.toString(),
                                    coordinator.getHostAddress(false),
                                    coordinator.port,
                                    Joiner.on("', '").join(participants),
                                    Joiner.on("', '").join(participants_v2),
                                    RepairState.STARTED.toString());
                }
                else
                {
                    fmtQry = format(queryWithoutNewColumns, SchemaConstants.DISTRIBUTED_KEYSPACE_NAME, REPAIR_HISTORY,
                                    keyspaceName,
                                    cfname,
                                    id.toString(),
                                    parent_id.toString(),
                                    range.left.toString(),
                                    range.right.toString(),
                                    coordinator.getHostAddress(false),
                                    Joiner.on("', '").join(participants),
                                    RepairState.STARTED.toString());
                }
                processSilent(fmtQry);
            }
        }
    }

