    /**
     * Reduces the differences provided by the merkle trees to a minimum set of differences
     */
    public static ImmutableMap<InetAddressAndPort, HostDifferences> reduce(DifferenceHolder differences, PreferedNodeFilter filter)
    {
        Map<InetAddressAndPort, IncomingRepairStreamTracker> trackers = createIncomingRepairStreamTrackers(differences);

        ImmutableMap.Builder<InetAddressAndPort, HostDifferences> mapBuilder = ImmutableMap.builder();
        for (Map.Entry<InetAddressAndPort, IncomingRepairStreamTracker> trackerEntry : trackers.entrySet())
        {
            IncomingRepairStreamTracker tracker = trackerEntry.getValue();
            HostDifferences rangesToFetch = new HostDifferences();
            for (Map.Entry<Range<Token>, StreamFromOptions> entry : tracker.getIncoming().entrySet())
            {
                Range<Token> rangeToFetch = entry.getKey();
                // StreamFromOptions contains a Set<Set<InetAddress>> with endpoints we need to stream
                // rangeToFetch from - if the inner set size > 1 means those endpoints are identical
                // for the range. pickConsistent picks a single endpoint from each of these sets.
                for (InetAddressAndPort remoteNode : pickConsistent(trackerEntry.getKey(), entry.getValue(), filter))
                    rangesToFetch.addSingleRange(remoteNode, rangeToFetch);
            }
            mapBuilder.put(trackerEntry.getKey(), rangesToFetch);
        }

        return mapBuilder.build();
    }

