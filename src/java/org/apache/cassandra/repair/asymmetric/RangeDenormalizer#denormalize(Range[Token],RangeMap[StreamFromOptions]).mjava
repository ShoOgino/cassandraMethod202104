    /**
     * "Denormalizes" (kind of the opposite of what Range.normalize does) the ranges in the keys of {{incoming}}
     *
     * It makes sure that if there is an intersection between {{range}} and some of the ranges in {{incoming.keySet()}}
     * we know that all intersections are keys in the updated {{incoming}}
     */
    public static Set<Range<Token>> denormalize(Range<Token> range, RangeMap<StreamFromOptions> incoming)
    {
        logger.trace("Denormalizing range={} incoming={}", range, incoming);
        Set<Map.Entry<Range<Token>, StreamFromOptions>> existingOverlappingRanges = incoming.removeIntersecting(range);

        Set<Range<Token>> intersections = intersection(existingOverlappingRanges, range);
        Set<Range<Token>> newExisting = Sets.union(subtractFromAllRanges(existingOverlappingRanges, range), intersections);
        Set<Range<Token>> newInput = Sets.union(subtractAll(existingOverlappingRanges, range), intersections);
        for (Range<Token> r : newExisting)
        {
            for (Map.Entry<Range<Token>, StreamFromOptions> entry : existingOverlappingRanges)
            {
                if (r.intersects(entry.getKey()))
                    incoming.put(r, entry.getValue().copy(r));
            }
        }
        logger.trace("denormalized {} to {}", range, newInput);
        logger.trace("denormalized incoming to {}", incoming);
        return newInput;
    }

