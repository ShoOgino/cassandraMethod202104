        protected Map.Entry<Range<Token>, T> computeNext()
        {
            if (shouldReturnLast)
            {
                shouldReturnLast = false;
                return new Entry<>(byStart.lastEntry());
            }
            while (tailIterator.hasNext())
            {
                Entry<Range<Token>, T> candidateNext = new Entry<>(tailIterator.next());
                Range<Token> candidateRange = candidateNext.getKey();

                if (candidateRange.isWrapAround()) // we know we already returned any wrapping range
                    continue;

                if (candidateRange.left.compareTo(range.right) >= 0 && (!range.isWrapAround())) // range is unwrapped, but that means one range has right == min token and is still wrapping
                    return endOfData();

                if (range.left.compareTo(candidateRange.right) >= 0)
                    continue;

                return candidateNext;
            }
            return endOfData();
        }

