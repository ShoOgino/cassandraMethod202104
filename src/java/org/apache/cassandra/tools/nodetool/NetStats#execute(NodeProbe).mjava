    @Override
    public void execute(NodeProbe probe)
    {
        PrintStream out = probe.output().out;
        out.printf("Mode: %s%n", probe.getOperationMode());
        Set<StreamState> statuses = probe.getStreamStatus();
        if (statuses.isEmpty())
            out.println("Not sending any streams.");
        for (StreamState status : statuses)
        {
            out.printf("%s %s%n", status.streamOperation.getDescription(), status.planId.toString());
            for (SessionInfo info : status.sessions)
            {
                out.printf("    %s", info.peer.toString(printPort));
                // print private IP when it is used
                if (!info.peer.equals(info.connecting))
                {
                    out.printf(" (using %s)", info.connecting.toString(printPort));
                }
                out.printf("%n");
                if (!info.receivingSummaries.isEmpty())
                {
                    printReceivingSummaries(out, info, humanReadable);
                }
                if (!info.sendingSummaries.isEmpty())
                {
                    printSendingSummaries(out, info, humanReadable);
                }
            }
        }

        if (!probe.isStarting())
        {
            out.printf("Read Repair Statistics:%nAttempted: %d%nMismatch (Blocking): %d%nMismatch (Background): %d%n", probe.getReadRepairAttempted(), probe.getReadRepairRepairedBlocking(), probe.getReadRepairRepairedBackground());

            MessagingServiceMBean ms = probe.getMessagingServiceProxy();
            out.printf("%-25s", "Pool Name");
            out.printf("%10s", "Active");
            out.printf("%10s", "Pending");
            out.printf("%15s", "Completed");
            out.printf("%10s%n", "Dropped");

            int pending;
            long completed;
            long dropped;

            pending = 0;
            for (int n : ms.getLargeMessagePendingTasksWithPort().values())
                pending += n;
            completed = 0;
            for (long n : ms.getLargeMessageCompletedTasksWithPort().values())
                completed += n;
            dropped = 0;
            for (long n : ms.getLargeMessageDroppedTasksWithPort().values())
                dropped += n;
            out.printf("%-25s%10s%10s%15s%10s%n", "Large messages", "n/a", pending, completed, dropped);

            pending = 0;
            for (int n : ms.getSmallMessagePendingTasksWithPort().values())
                pending += n;
            completed = 0;
            for (long n : ms.getSmallMessageCompletedTasksWithPort().values())
                completed += n;
            dropped = 0;
            for (long n : ms.getSmallMessageDroppedTasksWithPort().values())
                dropped += n;
            out.printf("%-25s%10s%10s%15s%10s%n", "Small messages", "n/a", pending, completed, dropped);

            pending = 0;
            for (int n : ms.getGossipMessagePendingTasksWithPort().values())
                pending += n;
            completed = 0;
            for (long n : ms.getGossipMessageCompletedTasksWithPort().values())
                completed += n;
            dropped = 0;
            for (long n : ms.getGossipMessageDroppedTasksWithPort().values())
                dropped += n;
            out.printf("%-25s%10s%10s%15s%10s%n", "Gossip messages", "n/a", pending, completed, dropped);
        }
    }

