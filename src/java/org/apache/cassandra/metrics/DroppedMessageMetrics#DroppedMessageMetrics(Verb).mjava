    public DroppedMessageMetrics(Verb verb)
    {
        String scope = verb.toString();

        if (REQUEST_VERB_ALIAS.containsKey(verb))
        {
            String alias = REQUEST_VERB_ALIAS.get(verb);
            dropped = Metrics.meter(createMetricName(TYPE, "Dropped", scope),
                                    createMetricName(TYPE, "Dropped", alias));
            internalDroppedLatency = Metrics.timer(createMetricName(TYPE, "InternalDroppedLatency", scope),
                                                   createMetricName(TYPE, "InternalDroppedLatency", alias));
            crossNodeDroppedLatency = Metrics.timer(createMetricName(TYPE, "CrossNodeDroppedLatency", scope),
                                                    createMetricName(TYPE, "CrossNodeDroppedLatency", alias));
        }
        else
        {
            dropped = Metrics.meter(createMetricName(TYPE, "Dropped", scope));
            internalDroppedLatency = Metrics.timer(createMetricName(TYPE, "InternalDroppedLatency", scope));
            crossNodeDroppedLatency = Metrics.timer(createMetricName(TYPE, "CrossNodeDroppedLatency", scope));
        }
    }

