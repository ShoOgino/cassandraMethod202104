    private HashMap<String, Serializable> repr(TableMetadata table)
    {
        HashMap<String, Serializable> ret = new HashMap<>();
        ret.put("id", table.id.toHexString());
        ret.put("name", table.name);
        ret.put("keyspace", table.keyspace);
        ret.put("partitioner", table.partitioner.toString());
        ret.put("kind", table.kind.name());
        ret.put("flags", Lists.newArrayList(table.flags.stream().map(Enum::name).iterator()));
        ret.put("params", repr(table.params));
        ret.put("indexes", Lists.newArrayList(table.indexes.stream().map(this::repr).iterator()));
        ret.put("triggers", Lists.newArrayList(repr(table.triggers)));
        ret.put("columns", Lists.newArrayList(table.columns.values().stream().map(this::repr).iterator()));
        ret.put("droppedColumns", Lists.newArrayList(table.droppedColumns.values().stream().map(this::repr).iterator()));
        ret.put("isCompactTable", table.isCompactTable());
        ret.put("isCompound", TableMetadata.Flag.isCompound(table.flags));
        ret.put("isCounter", table.isCounter());
        ret.put("isCQLTable", TableMetadata.Flag.isCQLTable(table.flags));
        ret.put("isDense", TableMetadata.Flag.isDense(table.flags));
        ret.put("isIndex", table.isIndex());
        ret.put("isStaticCompactTable", TableMetadata.Flag.isStaticCompactTable(table.flags));
        ret.put("isView", table.isView());
        ret.put("isVirtual", table.isVirtual());
        return ret;
    }

