    public static void validateNonCompact() throws StartupException
    {
        String query = String.format("SELECT keyspace_name, table_name, flags FROM %s.%s", SchemaConstants.SCHEMA_KEYSPACE_NAME, TABLES);

        StringBuilder messages = new StringBuilder();
        for (UntypedResultSet.Row row : query(query))
        {
            String keyspaceName = row.getString("keyspace_name");
            if (SchemaConstants.isLocalSystemKeyspace(keyspaceName))
                continue;

            Set<TableMetadata.Flag> flags = TableMetadata.Flag.fromStringSet(row.getFrozenSet("flags", UTF8Type.instance));
            if (TableMetadata.Flag.isLegacyCompactTable(flags))
            {
                String tableName = row.getString("table_name");
                if (isSafeToDropCompactStorage(keyspaceName, tableName))
                {
                    flags.remove(TableMetadata.Flag.DENSE);
                    flags.add(TableMetadata.Flag.COMPOUND);
                    String update = String.format("UPDATE %s.%s SET flags={%s} WHERE keyspace_name='%s' AND table_name='%s'",
                                                  SchemaConstants.SCHEMA_KEYSPACE_NAME, TABLES,
                                                  TableMetadata.Flag.toStringSet(flags).stream()
                                                                                       .map(f -> "'" + f + "'")
                                                                                       .collect(Collectors.joining(", ")),
                                                  keyspaceName, tableName);

                    logger.info("Safely dropping COMPACT STORAGE on {}.{}", keyspaceName, tableName);
                    executeInternal(update);
                }
                else
                {
                    messages.append(String.format("ALTER TABLE %s.%s DROP COMPACT STORAGE;\n",
                                                  maybeQuote(row.getString("keyspace_name")),
                                                  maybeQuote(tableName)));
                }
            }
        }

        if (messages.length() != 0)
        {
            throw new StartupException(StartupException.ERR_OUTDATED_SCHEMA,
                                       String.format("Compact Tables are not allowed in Cassandra starting with 4.0 version. " +
                                                     "In order to migrate off Compact Storage, downgrade to the latest Cassandra version, " +
                                                     "and run the following CQL commands: \n\n%s\n" +
                                                     "Then restart the node with the new Cassandra version.",
                                                     messages));
        }
    }

