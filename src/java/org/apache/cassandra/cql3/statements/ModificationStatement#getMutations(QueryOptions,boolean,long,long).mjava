    /**
     * Convert statement into a list of mutations to apply on the server
     *
     * @param options value for prepared statement markers
     * @param local if true, any requests (for collections) performed by getMutation should be done locally only.
     * @param now the current timestamp in microseconds to use if no timestamp is user provided.
     *
     * @return list of the mutations
     */
    private Collection<? extends IMutation> getMutations(QueryOptions options, boolean local, long now, long queryStartNanoTime)
    {
        List<ByteBuffer> keys = buildPartitionKeyNames(options);
        HashMultiset<ByteBuffer> perPartitionKeyCounts = HashMultiset.create();
        for (int i = 0; i < keys.size(); i++)
            perPartitionKeyCounts.add(keys.get(i)); // avoid .addAll since that allocates an iterator

        UpdatesCollector collector = new UpdatesCollector(Collections.singletonMap(cfm.cfId, updatedColumns), Collections.singletonMap(cfm.cfId, perPartitionKeyCounts));
        addUpdates(collector, keys, options, local, now, queryStartNanoTime);
        collector.validateIndexedColumns();

        return collector.toMutations();
    }

